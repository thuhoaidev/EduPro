import React, { useState, useEffect } from "react";
import { Button, Form, Input, Select, Upload, DatePicker, message } from "antd";
import { useNavigate } from "react-router-dom";
import { motion } from "framer-motion";
import { 
  UserOutlined, 
  LockOutlined, 
  MailOutlined,
  PhoneOutlined,
  SafetyCertificateOutlined,
  CalendarOutlined,
  EnvironmentOutlined,
  GlobalOutlined,
  FileTextOutlined,
  VideoCameraOutlined,
  UserAddOutlined,
  UploadOutlined,
  ArrowLeftOutlined,
  StarOutlined,
  BookOutlined
} from "@ant-design/icons";
import AuthNotification from "../../../components/common/AuthNotification";
import dayjs from 'dayjs';

const { TextArea } = Input;
const { Option } = Select;

interface InstructorRegistrationForm {
  fullName: string;
  email: string;
  phone: string;
  password: string;
  confirmPassword: string;
  gender: 'Nam' | 'N·ªØ' | 'Kh√°c';
  dateOfBirth: dayjs.Dayjs;
  address: string;
  degree: string;
  institution: string;
  graduationYear: number | string;
  major: string;
  specializations: string[];
  teachingExperience: number | string;
  experienceDescription: string;
  avatar: any[];
  cv: any[];
  certificates: any[];
  demoVideo: any[];
  bio: string;
  linkedin?: string;
  github?: string;
  website?: string;
}

interface InstructorRegistrationResponse {
  success: boolean;
  message: string;
  data: {
    user: {
      _id: string;
      fullname: string;
      email: string;
      status: string;
      email_verified: boolean;
      approval_status: string;
    };
    instructorInfo: any;
  };
}

export function InstructorRegistrationPage() {
  const navigate = useNavigate();
  const [loading, setLoading] = useState(false);
  const [currentStep, setCurrentStep] = useState(1);
  const [form] = Form.useForm();
  const [notification, setNotification] = useState<{
    isVisible: boolean;
    type: 'success' | 'error' | 'info' | 'warning';
    title: string;
    message: string;
  }>({
    isVisible: false,
    type: 'success',
    title: '',
    message: ''
  });

  // Fallback method ƒë·ªÉ g·ªçi API tr·ª±c ti·∫øp
  const callInstructorAPI = async (formData: FormData): Promise<InstructorRegistrationResponse> => {
    try {
      console.log('üîÑ Using fallback API call method...');
      const response = await fetch('http://localhost:5000/api/auth/instructor-register', {
        method: 'POST',
        body: formData,
        headers: {
          'Accept': 'application/json',
        },
      });
      
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
      }
      
      const result = await response.json();
      console.log('‚úÖ Fallback API call successful:', result);
      return result;
    } catch (error: any) {
      console.error('‚ùå Fallback API call failed:', error);
      throw error;
    }
  };

  const onFinish = async (values: InstructorRegistrationForm) => {
    setLoading(true);
    try {
      console.log('Form values before validation:', values);
      
      // Validate form tr∆∞·ªõc khi x·ª≠ l√Ω
      await form.validateFields();
      
      console.log('Form validation passed');
      
      // T·∫°o FormData ƒë·ªÉ g·ª≠i file
      const formData = new FormData();

      // Th√™m th√¥ng tin c√° nh√¢n
      formData.append('fullName', values.fullName || form.getFieldValue('fullName') || '');
      formData.append('email', values.email || form.getFieldValue('email') || '');
      formData.append('phone', values.phone || form.getFieldValue('phone') || '');
      formData.append('password', values.password || form.getFieldValue('password') || '');
      formData.append('gender', values.gender || form.getFieldValue('gender') || '');

      // X·ª≠ l√Ω dateOfBirth an to√†n
      try {
        const dateValue = form.getFieldValue('dateOfBirth') || values.dateOfBirth;
        if (!dateValue) throw new Error('Vui l√≤ng ch·ªçn ng√†y sinh!');
        let dateToFormat = dateValue;
        if (typeof dateValue === 'string') dateToFormat = dayjs(dateValue);
        if (dateValue instanceof Date) dateToFormat = dayjs(dateValue);
        if (!dayjs.isDayjs(dateToFormat)) throw new Error('Ng√†y sinh kh√¥ng h·ª£p l·ªá!');
        const formattedDate = dateToFormat.format('YYYY-MM-DD');
        formData.append('dateOfBirth', formattedDate);
      } catch (error: any) {
        console.error('Date formatting error:', error);
        throw new Error(error.message || 'Vui l√≤ng ch·ªçn ng√†y sinh h·ª£p l·ªá!');
      }
      formData.append('address', values.address || form.getFieldValue('address') || '');

      // Th√™m th√¥ng tin h·ªçc v·∫•n
      const degreeValue = values.degree || form.getFieldValue('degree') || '';
      const institutionValue = values.institution || form.getFieldValue('institution') || '';
      const graduationYearValue = values.graduationYear || form.getFieldValue('graduationYear') || '';
      const majorValue = values.major || form.getFieldValue('major') || '';
      formData.append('degree', degreeValue.toString().trim());
      formData.append('institution', institutionValue.toString().trim());
      formData.append('graduationYear', graduationYearValue.toString());
      formData.append('major', majorValue.toString().trim());

      // Th√™m th√¥ng tin chuy√™n m√¥n
      const specializationsValue = values.specializations || form.getFieldValue('specializations') || [];
      if (Array.isArray(specializationsValue)) {
        specializationsValue.forEach((spec, idx) => {
          if (typeof spec === 'string' && spec.trim()) {
            formData.append(`specializations[${idx}]`, spec.trim());
          }
        });
      } else if (typeof specializationsValue === 'string' && specializationsValue.trim()) {
        formData.append('specializations[0]', specializationsValue.trim());
      }
      formData.append('teachingExperience', (values.teachingExperience || form.getFieldValue('teachingExperience') || '').toString());
      formData.append('experienceDescription', (values.experienceDescription || form.getFieldValue('experienceDescription') || '').toString().trim());

      // Th√™m th√¥ng tin b·ªï sung
      formData.append('bio', values.bio || form.getFieldValue('bio') || '');
      if (values.linkedin || form.getFieldValue('linkedin')) formData.append('linkedin', values.linkedin || form.getFieldValue('linkedin'));
      if (values.github || form.getFieldValue('github')) formData.append('github', values.github || form.getFieldValue('github'));
      if (values.website || form.getFieldValue('website')) formData.append('website', values.website || form.getFieldValue('website'));

      // Th√™m files
      if (values.avatar && values.avatar.length > 0) {
        formData.append('avatar', values.avatar[0].originFileObj);
      }
      if (values.cv && values.cv.length > 0) {
        formData.append('cv', values.cv[0].originFileObj);
      }
      if (values.certificates && values.certificates.length > 0) {
        values.certificates.forEach(cert => {
          formData.append('certificates', cert.originFileObj);
        });
      }
      if (values.demoVideo && values.demoVideo.length > 0) {
        formData.append('demoVideo', values.demoVideo[0].originFileObj);
      }

      // Log l·∫°i FormData ƒë·ªÉ ki·ªÉm tra
      for (const pair of formData.entries()) {
        console.log(pair[0]+ ': ', pair[1]);
      }
      
      console.log('üöÄ B·∫Øt ƒë·∫ßu g·ªçi API instructor registration...');
      
      // G·ªçi API tr·ª±c ti·∫øp
      const result: InstructorRegistrationResponse = await callInstructorAPI(formData);
      
      console.log('‚úÖ API call th√†nh c√¥ng:', result);
      
      // Ki·ªÉm tra response structure
      if (result.success) {
        setNotification({
          isVisible: true,
          type: 'success',
          title: 'ƒêƒÉng k√Ω th√†nh c√¥ng!',
          message: `H·ªì s∆° gi·∫£ng vi√™n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng. Vui l√≤ng ki·ªÉm tra email ${result.data.user.email} ƒë·ªÉ x√°c minh t√†i kho·∫£n.`
        });
        
        // Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt v·ªÅ quy tr√¨nh
        setTimeout(() => {
          message.info('üìß Vui l√≤ng ki·ªÉm tra email v√† x√°c minh t√†i kho·∫£n tr∆∞·ªõc khi ƒëƒÉng nh·∫≠p!');
        }, 1000);
        
        setTimeout(() => {
          message.info('‚è≥ Sau khi x√°c minh email, h·ªì s∆° c·ªßa b·∫°n s·∫Ω ƒë∆∞·ª£c admin x√©t duy·ªát trong 3-5 ng√†y l√†m vi·ªác.');
        }, 2000);
      
        setTimeout(() => {
          navigate("/");
        }, 4000);
      } else {
        throw new Error(result.message || 'ƒê√£ x·∫£y ra l·ªói. Vui l√≤ng th·ª≠ l·∫°i.');
      }
    } catch (error: any) {
      console.error('L·ªói ƒëƒÉng k√Ω:', error);
      setNotification({
        isVisible: true,
        type: 'error',
        title: 'L·ªói ƒëƒÉng k√Ω!',
        message: error.message || 'ƒê√£ x·∫£y ra l·ªói. Vui l√≤ng th·ª≠ l·∫°i.'
      });
    } finally {
      setLoading(false);
    }
  };

  const nextStep = () => {
    form.validateFields().then(() => {
      setCurrentStep(currentStep + 1);
    }).catch((errorInfo) => {
      message.error('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc!');
    });
  };

  const prevStep = () => {
    setCurrentStep(currentStep - 1);
  };

  const renderStep1 = () => (
    <>
      <h3 className="text-2xl font-bold text-gray-800 mb-6 text-center">
        Th√¥ng tin c√° nh√¢n
      </h3>
      
      <Form.Item
        name="fullName"
        rules={[
          { required: true, message: 'Vui l√≤ng nh·∫≠p h·ªç v√† t√™n!' },
          { min: 2, message: 'H·ªç v√† t√™n ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±!' },
        ]}
      >
        <Input
          size="large"
          placeholder="H·ªç v√† t√™n ƒë·∫ßy ƒë·ªß"
          prefix={<UserOutlined className="text-gray-400" />}
          className="h-12 rounded-lg"
        />
      </Form.Item>

      <Form.Item
        name="email"
        rules={[
          { required: true, message: "Email l√† b·∫Øt bu·ªôc" },
          { type: "email", message: "Email kh√¥ng h·ª£p l·ªá" },
        ]}
      >
        <Input
          size="large"
          placeholder="Email"
          prefix={<MailOutlined className="text-gray-400" />}
          className="h-12 rounded-lg"
        />
      </Form.Item>

      <Form.Item
        name="phone"
        rules={[
          { required: true, message: "S·ªë ƒëi·ªán tho·∫°i l√† b·∫Øt bu·ªôc" },
          { pattern: /^[0-9+\-\s()]+$/, message: "S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá" },
        ]}
      >
        <Input
          size="large"
          placeholder="S·ªë ƒëi·ªán tho·∫°i"
          prefix={<PhoneOutlined className="text-gray-400" />}
          className="h-12 rounded-lg"
        />
      </Form.Item>

      <Form.Item
        name="gender"
        rules={[{ required: true, message: "Vui l√≤ng ch·ªçn gi·ªõi t√≠nh!" }]}
      >
        <Select
          size="large"
          placeholder="Ch·ªçn gi·ªõi t√≠nh"
          className="h-12 rounded-lg"
        >
          <Option value="Nam">Nam</Option>
          <Option value="N·ªØ">N·ªØ</Option>
          <Option value="Kh√°c">Kh√°c</Option>
        </Select>
      </Form.Item>

      <Form.Item
        name="dateOfBirth"
        rules={[{ required: true, message: "Vui l√≤ng ch·ªçn ng√†y sinh!" }]}
      >
        <DatePicker
          size="large"
          placeholder="Ng√†y sinh"
          className="w-full h-12 rounded-lg"
          format="DD/MM/YYYY"
        />
      </Form.Item>

      <Form.Item
        name="address"
        rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ!" }]}
      >
        <Input
          size="large"
          placeholder="ƒê·ªãa ch·ªâ"
          prefix={<EnvironmentOutlined className="text-gray-400" />}
          className="h-12 rounded-lg"
        />
      </Form.Item>

      <Form.Item
        name="password"
        rules={[
          { required: true, message: "M·∫≠t kh·∫©u l√† b·∫Øt bu·ªôc" },
          { min: 6, message: "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±" },
        ]}
      >
        <Input.Password
          size="large"
          placeholder="M·∫≠t kh·∫©u"
          prefix={<LockOutlined className="text-gray-400" />}
          className="h-12 rounded-lg"
        />
      </Form.Item>

      <Form.Item
        name="confirmPassword"
        dependencies={['password']}
        rules={[
          { required: true, message: "Vui l√≤ng x√°c nh·∫≠n m·∫≠t kh·∫©u!" },
          ({ getFieldValue }) => ({
            validator(_, value) {
              if (!value || getFieldValue('password') === value) {
                return Promise.resolve();
              }
              return Promise.reject(new Error('M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp!'));
            },
          }),
        ]}
      >
        <Input.Password
          size="large"
          placeholder="X√°c nh·∫≠n m·∫≠t kh·∫©u"
          prefix={<LockOutlined className="text-gray-400" />}
          className="h-12 rounded-lg"
        />
      </Form.Item>
    </>
  );

  const renderStep2 = () => (
    <>
      <h3 className="text-2xl font-bold text-gray-800 mb-6 text-center">
        Th√¥ng tin h·ªçc v·∫•n & Chuy√™n m√¥n
      </h3>
      
      <Form.Item
        name="degree"
        rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p b·∫±ng c·∫•p!" }]}
      >
        <Input
          size="large"
          placeholder="B·∫±ng c·∫•p cao nh·∫•t (VD: C·ª≠ nh√¢n, Th·∫°c sƒ©, Ti·∫øn sƒ©)"
          prefix={<FileTextOutlined className="text-gray-400" />}
          className="h-12 rounded-lg"
        />
      </Form.Item>

      <Form.Item
        name="institution"
        rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p tr∆∞·ªùng ƒë·∫°i h·ªçc!" }]}
      >
        <Input
          size="large"
          placeholder="Tr∆∞·ªùng ƒë·∫°i h·ªçc/C∆° s·ªü ƒë√†o t·∫°o"
          prefix={<BookOutlined className="text-gray-400" />}
          className="h-12 rounded-lg"
        />
      </Form.Item>

      <Form.Item
        name="major"
        rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p chuy√™n ng√†nh!" }]}
      >
        <Input
          size="large"
          placeholder="Chuy√™n ng√†nh"
          prefix={<BookOutlined className="text-gray-400" />}
          className="h-12 rounded-lg"
        />
      </Form.Item>

      <Form.Item
        name="graduationYear"
        rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p nƒÉm t·ªët nghi·ªáp!" }]}
      >
        <Input
          size="large"
          placeholder="NƒÉm t·ªët nghi·ªáp"
          prefix={<CalendarOutlined className="text-gray-400" />}
          className="h-12 rounded-lg"
          type="number"
        />
      </Form.Item>

      <Form.Item
        name="specializations"
        rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p lƒ©nh v·ª±c chuy√™n m√¥n!" }]}
      >
        <Select
          mode="tags"
          size="large"
          placeholder="Lƒ©nh v·ª±c chuy√™n m√¥n (VD: JavaScript, React, Node.js)"
          className="h-12 rounded-lg"
        />
      </Form.Item>

      <Form.Item
        name="teachingExperience"
        rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p s·ªë nƒÉm kinh nghi·ªám!" }]}
      >
        <Input
          size="large"
          placeholder="S·ªë nƒÉm kinh nghi·ªám gi·∫£ng d·∫°y"
          prefix={<StarOutlined className="text-gray-400" />}
          className="h-12 rounded-lg"
          type="number"
        />
      </Form.Item>

      <Form.Item
        name="experienceDescription"
        rules={[{ required: true, message: "Vui l√≤ng m√¥ t·∫£ kinh nghi·ªám!" }]}
      >
        <TextArea
          rows={4}
          placeholder="M√¥ t·∫£ chi ti·∫øt kinh nghi·ªám gi·∫£ng d·∫°y, d·ª± √°n ƒë√£ th·ª±c hi·ªán, th√†nh t·ª±u ƒë·∫°t ƒë∆∞·ª£c..."
          className="rounded-lg"
        />
      </Form.Item>
    </>
  );

  const renderStep3 = () => (
    <>
      <h3 className="text-2xl font-bold text-gray-800 mb-6 text-center">
        H·ªì s∆° & T√†i li·ªáu
      </h3>
      
      <Form.Item
        name="avatar"
        rules={[{ required: true, message: "Vui l√≤ng t·∫£i l√™n ·∫£nh ƒë·∫°i di·ªán!" }]}
        valuePropName="fileList"
        getValueFromEvent={(e) => {
          if (Array.isArray(e)) {
            return e;
          }
          return e?.fileList;
        }}
      >
        <Upload
          beforeUpload={() => false}
          maxCount={1}
          accept="image/*"
          listType="picture-card"
        >
          <div className="flex flex-col items-center">
            <UserAddOutlined className="text-2xl mb-2" />
            <div>T·∫£i ·∫£nh ƒë·∫°i di·ªán</div>
          </div>
        </Upload>
      </Form.Item>

      <Form.Item
        name="cv"
        rules={[{ required: true, message: "Vui l√≤ng t·∫£i l√™n CV!" }]}
        valuePropName="fileList"
        getValueFromEvent={(e) => {
          if (Array.isArray(e)) {
            return e;
          }
          return e?.fileList;
        }}
      >
        <Upload
          beforeUpload={() => false}
          maxCount={1}
          accept=".pdf,.doc,.docx"
        >
          <Button 
            icon={<UploadOutlined />} 
            size="large"
            className="w-full h-12 rounded-lg"
          >
            T·∫£i l√™n CV (PDF, DOC)
          </Button>
        </Upload>
      </Form.Item>

      <Form.Item
        name="certificates"
        rules={[{ required: true, message: "Vui l√≤ng t·∫£i l√™n √≠t nh·∫•t 1 ch·ª©ng ch·ªâ!" }]}
        valuePropName="fileList"
        getValueFromEvent={(e) => {
          if (Array.isArray(e)) {
            return e;
          }
          return e?.fileList;
        }}
      >
        <Upload
          beforeUpload={() => false}
          multiple
          accept=".pdf,.doc,.docx,.jpg,.jpeg,.png"
        >
          <Button 
            icon={<SafetyCertificateOutlined />} 
            size="large"
            className="w-full h-12 rounded-lg"
          >
            T·∫£i l√™n ch·ª©ng ch·ªâ (PDF, DOC, JPG)
          </Button>
        </Upload>
      </Form.Item>

      <Form.Item
        name="demoVideo"
        valuePropName="fileList"
        getValueFromEvent={(e) => {
          if (Array.isArray(e)) {
            return e;
          }
          return e?.fileList;
        }}
      >
        <Upload
          beforeUpload={() => false}
          maxCount={1}
          accept="video/*"
        >
          <Button 
            icon={<VideoCameraOutlined />} 
            size="large"
            className="w-full h-12 rounded-lg"
          >
            T·∫£i l√™n video demo gi·∫£ng d·∫°y (T√πy ch·ªçn)
          </Button>
        </Upload>
      </Form.Item>

      <Form.Item
        name="bio"
        rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p m√¥ t·∫£ b·∫£n th√¢n!" }]}
      >
        <TextArea
          rows={4}
          placeholder="Gi·ªõi thi·ªáu v·ªÅ b·∫£n th√¢n, ph∆∞∆°ng ph√°p gi·∫£ng d·∫°y, m·ª•c ti√™u..."
          className="rounded-lg"
        />
      </Form.Item>

      <Form.Item name="linkedin">
        <Input
          size="large"
          placeholder="LinkedIn URL (T√πy ch·ªçn)"
          prefix={<GlobalOutlined className="text-gray-400" />}
          className="h-12 rounded-lg"
        />
      </Form.Item>

      <Form.Item name="github">
        <Input
          size="large"
          placeholder="GitHub URL (T√πy ch·ªçn)"
          prefix={<GlobalOutlined className="text-gray-400" />}
          className="h-12 rounded-lg"
        />
      </Form.Item>

      <Form.Item name="website">
        <Input
          size="large"
          placeholder="Website c√° nh√¢n (T√πy ch·ªçn)"
          prefix={<GlobalOutlined className="text-gray-400" />}
          className="h-12 rounded-lg"
        />
      </Form.Item>
    </>
  );

  const containerVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: {
      opacity: 1,
      y: 0,
      transition: {
        duration: 0.6,
        staggerChildren: 0.1
      }
    }
  };
  const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: {
      opacity: 1,
      y: 0,
      transition: { duration: 0.5 }
    }
  };
  const buttonVariants = {
    hover: { scale: 1.05, boxShadow: "0 10px 25px rgba(0, 0, 0, 0.15)", transition: { duration: 0.2 } },
    tap: { scale: 0.95, transition: { duration: 0.1 } }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50 px-4 py-8 relative">
      {/* Back to Home Button */}
      <motion.div
        className="absolute top-6 left-6 z-50"
        initial={{ opacity: 0, x: -20 }}
        animate={{ opacity: 1, x: 0 }}
        transition={{ delay: 0.3, duration: 0.5 }}
      >
        <motion.button
          onClick={() => navigate("/")}
          className="group flex items-center gap-2 px-4 py-2 bg-white/80 backdrop-blur-sm rounded-full border border-gray-200/50 shadow-lg hover:shadow-xl transition-all duration-300 text-gray-700 hover:text-cyan-600"
          variants={buttonVariants}
          whileHover="hover"
          whileTap="tap"
        >
          <motion.div
            className="flex items-center justify-center w-6 h-6 rounded-full bg-gradient-to-r from-cyan-500 to-purple-500 text-white"
            whileHover={{ rotate: -10 }}
            transition={{ duration: 0.2 }}
          >
            <ArrowLeftOutlined className="text-xs" />
          </motion.div>
          <span className="font-medium text-sm">Trang ch·ªß</span>
          <motion.div
            className="w-2 h-2 rounded-full bg-cyan-500 opacity-0 group-hover:opacity-100 transition-opacity duration-300"
            initial={{ scale: 0 }}
            whileHover={{ scale: 1 }}
            transition={{ delay: 0.1 }}
          />
        </motion.button>
      </motion.div>
      {/* Main Card */}
      <motion.div 
        className="flex bg-white/80 backdrop-blur-sm shadow-2xl rounded-2xl overflow-hidden w-full max-w-4xl min-h-[600px] border border-white/20"
        variants={containerVariants}
        initial="hidden"
        animate="visible"
      >
        {/* Left Side - Form */}
        <div className="w-full p-8 lg:p-12 flex flex-col justify-center relative">
          {/* Background decoration */}
          <div className="absolute top-0 right-0 w-32 h-32 bg-gradient-to-br from-cyan-400/10 to-purple-400/10 rounded-full -translate-y-16 translate-x-16"></div>
          <div className="absolute bottom-0 left-0 w-24 h-24 bg-gradient-to-tr from-green-400/10 to-blue-400/10 rounded-full translate-y-12 -translate-x-12"></div>
          <motion.div
            variants={itemVariants}
            className="relative z-10"
          >
            <motion.h2
              className="text-4xl font-bold text-center mb-2 text-transparent bg-clip-text bg-gradient-to-r from-cyan-600 to-purple-600"
              variants={itemVariants}
            >
              ƒêƒÉng k√Ω Gi·∫£ng vi√™n
            </motion.h2>
            <motion.p
              className="text-center text-gray-600 mb-8"
              variants={itemVariants}
            >
              Chia s·∫ª ki·∫øn th·ª©c v√† kinh nghi·ªám c·ªßa b·∫°n v·ªõi c·ªông ƒë·ªìng h·ªçc vi√™n. H√£y ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin ƒë·ªÉ ch√∫ng t√¥i c√≥ th·ªÉ x√©t duy·ªát h·ªì s∆° c·ªßa b·∫°n.
            </motion.p>
            {/* Progress Steps */}
            <motion.div className="mb-8" variants={itemVariants}>
              <div className="flex items-center justify-center space-x-4">
                {[1, 2, 3].map((step) => (
                  <div key={step} className="flex items-center">
                    <div className={`w-10 h-10 rounded-full flex items-center justify-center text-sm font-semibold ${
                      currentStep >= step 
                        ? 'bg-cyan-500 text-white' 
                        : 'bg-gray-200 text-gray-500'
                    }`}>
                      {step}
                    </div>
                    {step < 3 && (
                      <div className={`w-16 h-1 mx-2 ${
                        currentStep > step ? 'bg-cyan-500' : 'bg-gray-200'
                      }`} />
                    )}
                  </div>
                ))}
              </div>
              <div className="text-center mt-4">
                <p className="text-sm text-gray-600">
                  B∆∞·ªõc {currentStep} c·ªßa 3: {
                    currentStep === 1 ? 'Th√¥ng tin c√° nh√¢n' :
                    currentStep === 2 ? 'H·ªçc v·∫•n & Chuy√™n m√¥n' :
                    'H·ªì s∆° & T√†i li·ªáu'
                  }
                </p>
              </div>
            </motion.div>
            {/* Form */}
            <Form
              form={form}
              layout="vertical"
              onFinish={onFinish}
              className="space-y-6"
            >
              <motion.div
                key={currentStep}
                initial={{ opacity: 0, x: 20 }}
                animate={{ opacity: 1, x: 0 }}
                exit={{ opacity: 0, x: -20 }}
                transition={{ duration: 0.3 }}
              >
                {currentStep === 1 && renderStep1()}
                {currentStep === 2 && renderStep2()}
                {currentStep === 3 && renderStep3()}
              </motion.div>
              {/* Navigation Buttons */}
              <motion.div 
                className="flex justify-between items-center pt-6 border-t border-gray-200"
                variants={itemVariants}
              >
                <motion.div
                  variants={buttonVariants}
                  whileHover="hover"
                  whileTap="tap"
                >
                  {currentStep > 1 && (
                    <Button
                      type="default"
                      size="large"
                      onClick={prevStep}
                      icon={<ArrowLeftOutlined />}
                      className="h-12 px-8 rounded-lg border-gray-300 hover:border-cyan-400 hover:text-cyan-600 transition-all duration-300"
                    >
                      Quay l·∫°i
                    </Button>
                  )}
                </motion.div>
                <motion.div
                  variants={buttonVariants}
                  whileHover="hover"
                  whileTap="tap"
                >
                  {currentStep < 3 ? (
                    <Button
                      type="primary"
                      size="large"
                      onClick={nextStep}
                      className="h-12 px-8 rounded-lg bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-600 hover:to-blue-600 border-0 shadow-lg hover:shadow-xl transition-all duration-300"
                    >
                      Ti·∫øp theo
                    </Button>
                  ) : (
                    <Button
                      type="primary"
                      size="large"
                      htmlType="submit"
                      loading={loading}
                      className="h-12 px-8 rounded-lg bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-600 hover:to-emerald-600 border-0 shadow-lg hover:shadow-xl transition-all duration-300"
                    >
                      {loading ? 'ƒêang x·ª≠ l√Ω...' : 'Ho√†n t·∫•t ƒëƒÉng k√Ω'}
                    </Button>
                  )}
                </motion.div>
              </motion.div>
            </Form>
          </motion.div>
        </div>
        {/* (C√≥ th·ªÉ b·ªï sung th√™m ph·∫ßn ph·∫£i cho h√¨nh ·∫£nh/gi·ªõi thi·ªáu n·∫øu mu·ªën) */}
      </motion.div>
      {/* Notification */}
      <AuthNotification
        isVisible={notification.isVisible}
        type={notification.type}
        title={notification.title}
        message={notification.message}
        onClose={() => setNotification({ ...notification, isVisible: false })}
      />
    </div>
  );
}

export default InstructorRegistrationPage; 