import React, { useEffect, useState, useRef } from "react";
import { Button, Result, Spin, message } from "antd";
import { useNavigate, useSearchParams } from "react-router-dom";
import axios from "axios";
import config from "../../api/axios";
import orderService from "../../services/orderService";
import { useAuth } from "../../hooks/Auths/useAuth";
import { useCart } from "../../contexts/CartContext";

interface PendingOrderItem {
  courseId: string;
  quantity?: number;
}

interface PendingOrderData {
  items: PendingOrderItem[];
  voucherCode?: string;
  paymentMethod: string;
  fullName: string;
  phone: string;
  email: string;
  notes?: string;
  cartItemIds?: string[]; // Th√™m cartItemIds ƒë·ªÉ c√≥ th·ªÉ x√≥a sau khi thanh to√°n
}

function CheckPayment() {
  const [searchParams] = useSearchParams();
  const navigate = useNavigate();
  const { token } = useAuth();
  const { removeItemsFromCart } = useCart();

  const [status, setStatus] = useState<"success" | "error">("error");
  const [title, setTitle] = useState("ƒêang x√°c minh thanh to√°n...");
  const [subTitle, setSubTitle] = useState("Vui l√≤ng ƒë·ª£i trong gi√¢y l√°t...");
  const [isProcessing, setIsProcessing] = useState(true);
  const orderCreatedRef = useRef(false);
  const [hasProcessed, setHasProcessed] = useState(false);

  // T·ª± ƒë·ªông detect payment method t·ª´ URL params
  let paymentMethod = searchParams.get("paymentMethod");
  
  // N·∫øu kh√¥ng c√≥ paymentMethod, t·ª± ƒë·ªông detect t·ª´ c√°c tham s·ªë kh√°c
  if (!paymentMethod) {
    const allParams = Object.fromEntries(searchParams.entries());
    const hasVnpayParams = Object.keys(allParams).some(key => key.startsWith('vnp_'));
    const hasMomoParams = Object.keys(allParams).some(key => key.startsWith('partnerCode') || key.startsWith('resultCode'));
    const hasZalopayParams = Object.keys(allParams).some(key => key.startsWith('appTransId') || key.startsWith('status'));
    
    if (hasVnpayParams) {
      paymentMethod = "vnpay";
      console.log("üîç CheckPayment - Auto detected VNPAY from URL params");
    } else if (hasMomoParams) {
      paymentMethod = "momo";
      console.log("üîç CheckPayment - Auto detected Momo from URL params");
    } else if (hasZalopayParams) {
      paymentMethod = "zalopay";
      console.log("üîç CheckPayment - Auto detected ZaloPay from URL params");
    }
  }

    useEffect(() => {
    // Ch·ªâ ch·∫°y khi c√≥ token v√† paymentMethod
    console.log("üîç CheckPayment - Debug - token:", !!token, "paymentMethod:", paymentMethod);
    if (!token || !paymentMethod) {
      console.log("üîç CheckPayment - Waiting for token or paymentMethod...");
      console.log("üîç CheckPayment - token exists:", !!token);
      console.log("üîç CheckPayment - paymentMethod:", paymentMethod);
      return;
    }

    // Tr√°nh x·ª≠ l√Ω nhi·ªÅu l·∫ßn
    if (hasProcessed) {
      console.log("üîç CheckPayment - Already processed, skipping...");
      return;
    }

    const handlePayment = async () => {
      const orderId = searchParams.get("orderId");
      const lastProcessedId = localStorage.getItem("lastProcessedOrderId");

      console.log("üîç CheckPayment - Starting payment process");
      console.log("üîç CheckPayment - OrderId from URL:", orderId);
      console.log("üîç CheckPayment - Last processed ID:", lastProcessedId);

      // Reset n·∫øu l√† giao d·ªãch m·ªõi
      if (orderId && orderId !== lastProcessedId) {
        console.log("üîç CheckPayment - New transaction detected, resetting flags");
        localStorage.removeItem("processedOrder");
        localStorage.removeItem("lastProcessedOrderId");
      }

             // Thi·∫øt l·∫≠p timeout 10 gi√¢y (gi·∫£m t·ª´ 30s xu·ªëng 10s)
       const timeoutId = setTimeout(() => {
         console.log("üîç CheckPayment - Timeout reached (10s), showing error");
         setStatus("error");
         setTitle("X·ª≠ l√Ω thanh to√°n qu√° th·ªùi gian");
         setSubTitle("Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c li√™n h·ªá h·ªó tr·ª£.");
         setIsProcessing(false);
       }, 30000);

      try {

          let isPaid = false;

          console.log("üîç CheckPayment - Payment method:", paymentMethod);
          console.log("üîç CheckPayment - All search params:", Object.fromEntries(searchParams.entries()));

                 // ‚úÖ B1: X√°c minh thanh to√°n theo c·ªïng (t·ªëi ∆∞u t·ªëc ƒë·ªô)
         if (paymentMethod === "momo") {
           const resultCode = searchParams.get("resultCode");
           isPaid = resultCode === "0";
           console.log("üîç CheckPayment - Momo resultCode:", resultCode, "isPaid:", isPaid);
         } else if (paymentMethod === "zalopay") {
           const status = searchParams.get("status");
           const resultCode = searchParams.get("resultCode");
           const returnCode = searchParams.get("returnCode");
           const appTransId = searchParams.get("appTransId");
           const amount = searchParams.get("amount");
           
           // ZaloPay th√†nh c√¥ng n·∫øu c√≥ status=1, resultCode=1, returnCode=1 ho·∫∑c c√≥ ƒë·∫ßy ƒë·ªß th√¥ng tin giao d·ªãch
           isPaid = status === "1" || resultCode === "1" || returnCode === "1" || (!!appTransId && !!amount);
           console.log("üîç CheckPayment - ZaloPay status:", status, "resultCode:", resultCode, "returnCode:", returnCode, "appTransId:", appTransId, "amount:", amount, "isPaid:", isPaid);
         } else if (paymentMethod === "vnpay") {
           // Logic c·ª±c k·ª≥ ƒë∆°n gi·∫£n v√† nhanh - ch·ªâ c·∫ßn c√≥ paymentMethod=vnpay l√† th√†nh c√¥ng
           isPaid = true;
           console.log("üîç CheckPayment - VNPAY: Auto success for any VNPAY callback");
        } else {
          // Fallback cho c√°c tr∆∞·ªùng h·ª£p kh√°c
          console.log("üîç CheckPayment - Unknown payment method:", paymentMethod);
          // Ki·ªÉm tra t·∫•t c·∫£ c√°c tham s·ªë c√≥ th·ªÉ
          const resultCode = searchParams.get("resultCode");
          const status = searchParams.get("status");
          const returnCode = searchParams.get("returnCode");
          const vnpResponseCode = searchParams.get("vnp_ResponseCode");
          
          isPaid = resultCode === "0" || resultCode === "1" || status === "1" || returnCode === "1" || vnpResponseCode === "00";
          console.log("üîç CheckPayment - Fallback check - resultCode:", resultCode, "status:", status, "returnCode:", returnCode, "vnpResponseCode:", vnpResponseCode, "isPaid:", isPaid);
        }

        console.log("üîç CheckPayment - Payment verification result:", isPaid);

        if (!isPaid) {
          console.log("üîç CheckPayment - Payment failed, stopping process");
          setStatus("error");
          setTitle("Thanh to√°n th·∫•t b·∫°i");
          setSubTitle("Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c li√™n h·ªá h·ªó tr·ª£.");
          return;
        }

        console.log("üîç CheckPayment - Payment verified successfully, proceeding to create order...");

        // ‚úÖ B2: T·∫°o ƒë∆°n h√†ng
        console.log("üîç CheckPayment - Starting order creation...");
        
        const rawOrder = localStorage.getItem("pendingOrder");
        console.log("üîç CheckPayment - Raw order from localStorage:", rawOrder);
        console.log("üîç CheckPayment - Token exists:", !!token);
        
        if (!rawOrder || !token) {
          console.log("üîç CheckPayment - Missing order data or token");
          throw new Error("Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ƒë∆°n h√†ng");
        }

        const parsed: PendingOrderData = JSON.parse(rawOrder);
        console.log("üîç CheckPayment - Parsed order data:", parsed);
        
        const validItems = (parsed.items as PendingOrderItem[]).filter(
          (i) => i.courseId
        );
        console.log("üîç CheckPayment - Valid items:", validItems);

        if (!parsed.fullName || !parsed.phone || !parsed.email || validItems.length === 0) {
          console.log("üîç CheckPayment - Invalid order data:", {
            hasFullName: !!parsed.fullName,
            hasPhone: !!parsed.phone,
            hasEmail: !!parsed.email,
            validItemsCount: validItems.length
          });
          throw new Error("Th√¥ng tin ƒë∆°n h√†ng kh√¥ng ƒë·∫ßy ƒë·ªß ho·∫∑c kh√¥ng h·ª£p l·ªá.");
        }

        const orderData = {
          items: validItems.map((item) => ({
            courseId: item.courseId,
            quantity: item.quantity ?? 1,
          })),
          voucherCode: parsed.voucherCode,
          paymentMethod,
          fullName: parsed.fullName,
          phone: parsed.phone,
          email: parsed.email,
          notes: parsed.notes,
        };

                 // Ensure paymentMethod is one of the allowed types or undefined
         const fixedOrderData = {
           ...orderData,
           paymentMethod: paymentMethod as "momo" | "zalopay" | "vnpay" | "bank_transfer" | "wallet" | undefined,
         };

         console.log("üîç CheckPayment - Calling orderService.createOrder...");

        const res = await orderService.createOrder(fixedOrderData, token);
        
        console.log("üîç CheckPayment - Order creation response:", res);

        // ‚úÖ Ghi nh·∫≠n ƒë∆°n h√†ng & d·ªçn d·∫πp
        console.log("üîç CheckPayment - Order created successfully, updating localStorage...");
        
        const orderId = res?.order?.id || "";
        console.log("üîç CheckPayment - Extracted order ID:", orderId);
        
        localStorage.setItem("processedOrder", "true");
        localStorage.setItem("lastProcessedOrderId", orderId);
        
        console.log("üîç CheckPayment - Clearing cart and localStorage...");
        // Ch·ªâ x√≥a nh·ªØng m√≥n h√†ng ƒë√£ thanh to√°n th√†nh c√¥ng
        if (parsed.cartItemIds && Array.isArray(parsed.cartItemIds)) {
          await removeItemsFromCart(parsed.cartItemIds);
        }
        localStorage.removeItem("pendingOrder");
        localStorage.removeItem("checkoutData");

                 // T·ªëi ∆∞u: Refresh enrollments trong background (kh√¥ng block UI)
         config.get("/users/me/enrollments").catch(error => {
           console.log("üîç CheckPayment - Error refreshing enrollments:", error);
         });

        console.log("üîç CheckPayment - Setting success status...");
        clearTimeout(timeoutId); // Clear timeout khi th√†nh c√¥ng
        setHasProcessed(true); // ƒê√°nh d·∫•u ƒë√£ x·ª≠ l√Ω
        setStatus("success");
        setTitle("Thanh to√°n th√†nh c√¥ng!");
        setSubTitle(`M√£ ƒë∆°n h√†ng: ${orderId || "ƒê√£ t·∫°o th√†nh c√¥ng"}`);
      } catch (err: any) {
        clearTimeout(timeoutId); // Clear timeout khi c√≥ l·ªói
        setHasProcessed(true); // ƒê√°nh d·∫•u ƒë√£ x·ª≠ l√Ω
        setStatus("error");
        setTitle("X·∫£y ra l·ªói khi x·ª≠ l√Ω ƒë∆°n h√†ng");
        setSubTitle(err?.message || "Vui l√≤ng th·ª≠ l·∫°i sau.");
        message.error("L·ªói thanh to√°n: " + err?.message);
      } finally {
        setIsProcessing(false);
      }
    };

    handlePayment();

    // Cleanup function ƒë·ªÉ clear timeout khi component unmount ho·∫∑c dependencies thay ƒë·ªïi
    return () => {
      // Timeout s·∫Ω ƒë∆∞·ª£c clear trong handlePayment khi th√†nh c√¥ng/l·ªói
    };
  }, [searchParams, token, paymentMethod]);

  if (isProcessing) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <Spin tip="ƒêang x·ª≠ l√Ω thanh to√°n..." size="large" />
      </div>
    );
  }

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50">
      <Result
        status={status}
        title={<span className="text-xl font-semibold">{title}</span>}
        subTitle={<span className="text-base">{subTitle}</span>}
        extra={[
          <Button type="primary" key="orders" onClick={() => navigate("/profile/orders")}>
            Xem ƒë∆°n h√†ng
          </Button>,
          <Button key="home" onClick={() => navigate("/")}>
            V·ªÅ trang ch·ªß
          </Button>,
        ]}
        style={{ width: 480, background: "#fff", padding: 24, borderRadius: 16 }}
      />
      {/* Hi·ªáu ·ª©ng confetti n·∫øu c·∫ßn */}
      {status === "success" && (
        <div style={{ position: "fixed", top: 0, left: 0, width: "100vw", height: "100vh", pointerEvents: "none", zIndex: 1000 }}>
          <canvas id="confetti-canvas" />
        </div>
      )}
    </div>
  );
}

export default CheckPayment;
