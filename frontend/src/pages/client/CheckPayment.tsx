import { Button, Result, message, Spin } from "antd";
import axios from "axios";
import config from "../../api/axios";
import React, { useEffect, useState } from "react";
import { useNavigate, useSearchParams } from "react-router-dom";
import orderService from "../../services/orderService";
import { useAuth } from "../../hooks/Auths/useAuth";
import { useCart } from "../../contexts/CartContext";

interface PendingOrderItem {
  courseId: string;
  quantity?: number;
}

function CheckPayment() {
  const [searchParams] = useSearchParams();
  const navigate = useNavigate();
  const { token } = useAuth();
  const { clearCart } = useCart();

  const [status, setStatus] = useState<"success" | "error">("error");
  const [title, setTitle] = useState("ƒêang x√°c minh thanh to√°n...");
  const [subTitle, setSubTitle] = useState("Vui l√≤ng ƒë·ª£i trong gi√¢y l√°t...");
  const [isProcessing, setIsProcessing] = useState(true);
  const [hasProcessed, setHasProcessed] = useState(false);

  const paymentMethod = searchParams.get("paymentMethod");

  useEffect(() => {
    if (hasProcessed) return; // Tr√°nh g·ªçi nhi·ªÅu l·∫ßn
    
    const handlePayment = async () => {
      setHasProcessed(true); // ƒê√°nh d·∫•u ƒë√£ x·ª≠ l√Ω
      try {
        let isPaid = false;

        // ‚úÖ B∆Ø·ªöC 1: X√°c minh thanh to√°n
        if (paymentMethod === "zalopay") {
          const status = searchParams.get("status");
          if (Number(status) === 1) {
            isPaid = true;
            setStatus("success");
            setTitle("Thanh to√°n th√†nh c√¥ng");
          } else {
            setStatus("error");
            setTitle("Kh√°ch h√†ng ƒë√£ h·ªßy thanh to√°n");
            return;
          }
        } else if (paymentMethod === "momo") {
          // X·ª≠ l√Ω callback t·ª´ MoMo
          const resultCode = searchParams.get("resultCode");
          const orderId = searchParams.get("orderId");
          
          if (resultCode === "0") {
            isPaid = true;
            setStatus("success");
            setTitle("Thanh to√°n th√†nh c√¥ng");
            console.log("MoMo payment successful, orderId:", orderId);
          } else {
            setStatus("error");
            setTitle("Thanh to√°n th·∫•t b·∫°i");
            setSubTitle("M√£ l·ªói: " + resultCode);
            return;
          }
        } else {
          const { data } = await axios.get(
            `http://localhost:5000/api/check_payment?${searchParams.toString()}`
          );
          const code = data?.data?.vnp_ResponseCode;

          if (code === "00") {
            isPaid = true;
            setStatus("success");
            setTitle("Thanh to√°n th√†nh c√¥ng");
          } else if (code === "24") {
            setStatus("error");
            setTitle("Kh√°ch h√†ng ƒë√£ h·ªßy thanh to√°n");
            return;
          } else {
            setStatus("error");
            setTitle("Thanh to√°n th·∫•t b·∫°i");
            setSubTitle("Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c li√™n h·ªá h·ªó tr·ª£");
            return;
          }
        }

        // ‚úÖ B∆Ø·ªöC 2: X·ª≠ l√Ω ƒë∆°n h√†ng sau khi thanh to√°n th√†nh c√¥ng
        if (isPaid) {
          const rawOrder = localStorage.getItem("pendingOrder");

          if (!rawOrder || !token) {
            setStatus("error");
            setTitle("Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ƒë∆°n h√†ng");
            setSubTitle("Vui l√≤ng th·ª≠ l·∫°i");
            return;
          }

          const parsed = JSON.parse(rawOrder);

          const validItems = (parsed.items as PendingOrderItem[]).filter(
            (item) => item.courseId && typeof item.courseId === "string"
          );

          if (validItems.length === 0) {
            throw new Error("Kh√≥a h·ªçc kh√¥ng h·ª£p l·ªá ho·∫∑c thi·∫øu courseId!");
          }

          // Ki·ªÉm tra xem ƒë√£ c√≥ ƒë∆°n h√†ng pending ch∆∞a
          let existingOrder = null;
          try {
            console.log("üîç Checking for existing pending orders...");
            const ordersResponse = await config.get("/orders?status=pending");
            console.log("üîç Orders response:", ordersResponse.data);
            
            if (ordersResponse.data.success && ordersResponse.data.data.orders.length > 0) {
              console.log("üîç Found pending orders:", ordersResponse.data.data.orders.length);
              
              // T√¨m ƒë∆°n h√†ng pending c√≥ c√πng items
              existingOrder = ordersResponse.data.data.orders.find((order: any) => {
                const orderItemIds = order.items.map((item: any) => item.courseId);
                const pendingItemIds = validItems.map(item => item.courseId);
                const isMatch = orderItemIds.length === pendingItemIds.length &&
                       orderItemIds.every((id: string) => pendingItemIds.includes(id));
                
                console.log("üîç Comparing order:", {
                  orderId: order.id,
                  orderItemIds,
                  pendingItemIds,
                  isMatch
                });
                
                return isMatch;
              });
              
              if (existingOrder) {
                console.log("üîç Found matching existing order:", existingOrder.id);
              } else {
                console.log("üîç No matching existing order found");
              }
            } else {
              console.log("üîç No pending orders found");
            }
          } catch (error) {
            console.log("Error checking existing orders:", error);
          }

          if (existingOrder) {
            // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng hi·ªán c√≥
            console.log("Updating existing order:", existingOrder.id);
            try {
              await config.put(`/orders/${existingOrder.id}/complete-payment`);
              
              // X√≥a gi·ªè h√†ng v√† localStorage
              await clearCart();
              localStorage.removeItem("pendingOrder");
              localStorage.removeItem("checkoutData");
              localStorage.removeItem("cart");
              localStorage.removeItem("cartVoucherData");

              setStatus("success");
              setTitle("Thanh to√°n th√†nh c√¥ng!");
              setSubTitle(`M√£ ƒë∆°n h√†ng: ${existingOrder.id}`);
              
              // Chuy·ªÉn h∆∞·ªõng v·ªÅ trang OrdersPage sau 2 gi√¢y
              setTimeout(() => {
                navigate("/profile/orders");
              }, 2000);
              return;
            } catch (error) {
              console.error("Error updating existing order:", error);
              // Ti·∫øp t·ª•c v·ªõi logic t·∫°o ƒë∆°n h√†ng m·ªõi n·∫øu c·∫≠p nh·∫≠t th·∫•t b·∫°i
            }
          }

          // T·∫°o ƒë∆°n h√†ng m·ªõi n·∫øu kh√¥ng c√≥ ƒë∆°n h√†ng pending
          const orderData = {
            items: validItems.map((item) => ({
              courseId: item.courseId,
              quantity: item.quantity ?? 1,
            })),
            voucherCode: parsed.voucherCode,
            paymentMethod: parsed.paymentMethod,
            shippingInfo: {
              fullName: parsed.fullName,
              phone: parsed.phone,
              email: parsed.email,
            },
            notes: parsed.notes,
          };

          console.log("üîç Creating new order with data:", orderData);
          const res = await orderService.createOrder(orderData, token);
          console.log("üîç New order created:", res.order.id);

                     // ‚úÖ X√≥a gi·ªè h√†ng v√† localStorage
           await clearCart();
           localStorage.removeItem("pendingOrder");
           localStorage.removeItem("checkoutData");
           localStorage.removeItem("cart");
           localStorage.removeItem("cartVoucherData");

          // ‚úÖ Load l·∫°i d·ªØ li·ªáu kh√≥a h·ªçc ƒë√£ mua
          try {
            await config.get("/users/me/enrollments");
          } catch (error) {
            console.log("Refresh enrollment data failed:", error);
          }

                     setStatus("success");
           setTitle("Thanh to√°n th√†nh c√¥ng!");
           setSubTitle(`M√£ ƒë∆°n h√†ng: ${res.order.id}`);
           
           // Chuy·ªÉn h∆∞·ªõng v·ªÅ trang OrdersPage sau 2 gi√¢y
           setTimeout(() => {
             navigate("/profile/orders");
           }, 2000);
        }
      } catch (error: unknown) {
        console.error("‚ùå Payment processing error:", error);
        setStatus("error");
        setTitle("ƒê√£ c√≥ l·ªói x·∫£y ra khi x√°c nh·∫≠n thanh to√°n");
        if (error instanceof Error) {
          setSubTitle(error.message || "Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c li√™n h·ªá h·ªó tr·ª£.");
        } else {
          setSubTitle("Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c li√™n h·ªá h·ªó tr·ª£.");
        }
        message.error("L·ªói x·ª≠ l√Ω thanh to√°n!");
      } finally {
        setIsProcessing(false);
      }
    };

    handlePayment();
  }, [searchParams, paymentMethod, token, navigate, hasProcessed]);

  if (isProcessing) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <Spin size="large" tip="ƒêang x·ª≠ l√Ω thanh to√°n..." />
      </div>
    );
  }

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50">
      <Result
        status={status}
        icon={
          status === "success" ? (
            <svg width="72" height="72" fill="none" viewBox="0 0 72 72">
              <circle cx="36" cy="36" r="36" fill="#52c41a" opacity="0.15" />
              <path d="M22 37l10 10 18-18" stroke="#52c41a" strokeWidth="4" strokeLinecap="round" strokeLinejoin="round" />
            </svg>
          ) : (
            <svg width="72" height="72" fill="none" viewBox="0 0 72 72">
              <circle cx="36" cy="36" r="36" fill="#ff4d4f" opacity="0.15" />
              <path d="M27 27l18 18M45 27L27 45" stroke="#ff4d4f" strokeWidth="4" strokeLinecap="round" />
            </svg>
          )
        }
                 title={<span style={{ fontSize: 28, fontWeight: 700 }}>{title}</span>}
         subTitle={
           <span style={{ fontSize: 18 }}>
             {subTitle}
             {status === "success" && (
               <div style={{ marginTop: '12px', fontSize: '14px', color: '#52c41a' }}>
                 ‚è±Ô∏è T·ª± ƒë·ªông chuy·ªÉn h∆∞·ªõng v·ªÅ trang ƒë∆°n h√†ng sau 2 gi√¢y...
               </div>
             )}
           </span>
         }
         extra={[
           <Button type="primary" key="orders" size="large" onClick={() => navigate("/profile/orders")}>
             {status === "success" ? "Xem ƒë∆°n h√†ng ngay" : "Xem ƒë∆°n h√†ng"}
           </Button>,
           <Button key="home" size="large" onClick={() => navigate("/")}>V·ªÅ trang ch·ªß</Button>,
         ]}
        style={{ width: 480, background: '#fff', borderRadius: 16, boxShadow: '0 4px 24px rgba(0,0,0,0.08)', padding: 32 }}
      />
      {/* Hi·ªáu ·ª©ng confetti khi th√†nh c√¥ng */}
      {status === "success" && (
        <div style={{ position: 'fixed', top: 0, left: 0, width: '100vw', height: '100vh', pointerEvents: 'none', zIndex: 1000 }}>
          <canvas id="confetti-canvas" style={{ width: '100vw', height: '100vh' }}></canvas>
        </div>
      )}
    </div>
  );
}

export default CheckPayment;
