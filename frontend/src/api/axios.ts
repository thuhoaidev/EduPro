import axios from "axios";
import { refreshAccessToken } from '../services/authService';
import { clearAuthData, redirectToLogin } from '../utils/tokenUtils';

// C·∫•u h√¨nh API
const API_URL = 'http://localhost:5000/api';
// const API_URL = '';

export const config = axios.create({
    baseURL: API_URL,
    withCredentials: true, // Th√™m ƒë·ªÉ h·ªó tr·ª£ CORS v·ªõi credentials
    headers: {
        "Content-Type": "application/json",
    },
    timeout: 10000 // timeout sau 10 gi√¢y
});

// Bi·∫øn ƒë·ªÉ theo d√µi vi·ªác refresh token
let isRefreshing = false;
let failedQueue: any[] = [];

const processQueue = (error: any, token: string | null = null) => {
    failedQueue.forEach(({ resolve, reject }) => {
        if (error) {
            reject(error);
        } else {
            resolve(token);
        }
    });

    failedQueue = [];
};

// Th√™m interceptor ƒë·ªÉ t·ª± ƒë·ªông g·∫Øn token v√†o header
config.interceptors.request.use(
    (request) => {
        const token = localStorage.getItem('token');
        if (token) {
            // Ki·ªÉm tra token c√≥ h·ª£p l·ªá kh√¥ng
            try {
                const payload = JSON.parse(atob(token.split('.')[1]));
                const currentTime = Date.now() / 1000;
                if (payload.exp < currentTime) {
                    // Token ƒë√£ h·∫øt h·∫°n, x√≥a kh·ªèi localStorage
                    localStorage.removeItem('token');
                    localStorage.removeItem('user');
                    localStorage.removeItem('refresh_token');
                    console.log('‚ö†Ô∏è Token expired, removed from localStorage');
                } else {
                    request.headers['Authorization'] = `Bearer ${token}`;
                }
            } catch (error) {
                // Token kh√¥ng h·ª£p l·ªá, x√≥a kh·ªèi localStorage
                localStorage.removeItem('token');
                localStorage.removeItem('user');
                localStorage.removeItem('refresh_token');
                console.log('‚ö†Ô∏è Invalid token, removed from localStorage');
            }
        }
        return request;
    },
    (error) => Promise.reject(error)
);

// X·ª≠ l√Ω response
config.interceptors.response.use(
    (response) => {
        return response;
    },
    async (error) => {
        const originalRequest = error.config;
        
        // Danh s√°ch c√°c route public kh√¥ng c·∫ßn authentication
        const publicRoutes = [
            '/courses',
            '/courses/slug/',
            '/categories',
            '/blogs',
            '/users/verify-instructor-email/',
            '/auth/verify-email/'
        ];
        
        // Ki·ªÉm tra xem request c√≥ ph·∫£i l√† route public kh√¥ng
        const requestUrl = originalRequest.url || '';
        const isPublicRoute = publicRoutes.some(route => 
            requestUrl.includes(route) || 
            (requestUrl.includes('/courses/') && !requestUrl.includes('/courses/instructor'))
        );
        
        // Th√™m ki·ªÉm tra c·ª• th·ªÉ cho route chi ti·∫øt kh√≥a h·ªçc v√† c√°c route li√™n quan
        const isCourseDetailRoute = requestUrl.includes('/courses/') && 
            (requestUrl.match(/\/courses\/[^\/]+$/) || 
             requestUrl.match(/\/courses\/[^\/]+\/content$/) ||
             requestUrl.match(/\/courses\/[^\/]+\/reviews$/) ||
             requestUrl.match(/\/courses\/[^\/]+\/sections$/) ||
             requestUrl.match(/\/courses\/[^\/]+\/stats$/));
        
        console.log('üîç Request URL:', requestUrl);
        console.log('üîç Is public route:', isPublicRoute);
        console.log('üîç Is course detail route:', isCourseDetailRoute);
        console.log('üîç Error status:', error.response?.status);
        
        if ((error.response?.status === 401 || error.response?.status === 403) && !originalRequest._retry) {
            // N·∫øu ƒëang ·ªü trang login th√¨ ch·ªâ x√≥a token, kh√¥ng redirect
            if (window.location.pathname === '/login') {
                localStorage.removeItem('token');
                localStorage.removeItem('user');
                localStorage.removeItem('refresh_token');
                return Promise.reject(error);
            }
            
            // N·∫øu l√† route public ho·∫∑c route chi ti·∫øt kh√≥a h·ªçc, kh√¥ng redirect, ch·ªâ reject error
            if (isPublicRoute || isCourseDetailRoute) {
                console.log('‚úÖ Public route or course detail route detected, not redirecting to login');
                return Promise.reject(error);
            }
            
            console.log('üîí Protected route detected, attempting refresh token');
            originalRequest._retry = true;
            isRefreshing = true;
            try {
                const newToken = await refreshAccessToken();
                if (newToken) {
                    localStorage.setItem('token', newToken);
                    originalRequest.headers.Authorization = `Bearer ${newToken}`;
                    processQueue(null, newToken);
                    return config(originalRequest);
                } else {
                    processQueue(error, null);
                    redirectToLogin();
                    return Promise.reject(error);
                }
            } catch (refreshError) {
                processQueue(refreshError, null);
                redirectToLogin();
                return Promise.reject(error);
            } finally {
                isRefreshing = false;
            }
        }
        return Promise.reject(error);
    }
);

export default config;
