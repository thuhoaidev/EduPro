const mongoose = require('mongoose');
const User = require('./src/models/User');
const Role = require('./src/models/Role');

// K·∫øt n·ªëi MongoDB
mongoose.connect('mongodb://localhost:27017/edupro', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

async function testInstructorApproval() {
  try {
    console.log('üß™ Testing instructor approval logic...\n');

    // T√¨m role instructor
    const instructorRole = await Role.findOne({ name: 'instructor' });
    if (!instructorRole) {
      console.error('‚ùå Kh√¥ng t√¨m th·∫•y role instructor');
      return;
    }

    // T√¨m m·ªôt instructor ƒë·ªÉ test
    const testInstructor = await User.findOne({ 
      role_id: instructorRole._id,
      'instructorInfo.instructor_profile_status': 'pending'
    }).populate('role_id');

    if (!testInstructor) {
      console.log('‚ÑπÔ∏è Kh√¥ng t√¨m th·∫•y instructor c√≥ tr·∫°ng th√°i pending ƒë·ªÉ test');
      return;
    }

    console.log(`üë§ Test instructor: ${testInstructor.fullname} (${testInstructor.email})`);
    console.log(`   Current approval_status: ${testInstructor.approval_status}`);
    console.log(`   Current instructor_profile_status: ${testInstructor.instructorInfo?.instructor_profile_status}`);
    console.log(`   Current is_approved: ${testInstructor.instructorInfo?.is_approved}`);

    // Simulate approval
    console.log('\n‚úÖ Simulating approval...');
    
    // C·∫≠p nh·∫≠t tr·∫°ng th√°i nh∆∞ trong controller
    testInstructor.approval_status = 'approved';
    testInstructor.isInstructor = true;

    if (!testInstructor.instructorInfo) {
      testInstructor.instructorInfo = {};
    }
    testInstructor.instructorInfo.is_approved = true;
    testInstructor.instructorInfo.instructor_profile_status = 'approved';
    testInstructor.instructorInfo.approval_date = new Date();
    testInstructor.instructorInfo.rejection_reason = null;
    testInstructor.markModified('instructorInfo');

    await testInstructor.save();

    console.log('‚úÖ Approval completed!');
    console.log(`   New approval_status: ${testInstructor.approval_status}`);
    console.log(`   New instructor_profile_status: ${testInstructor.instructorInfo.instructor_profile_status}`);
    console.log(`   New is_approved: ${testInstructor.instructorInfo.is_approved}`);

    // Test API response mapping
    console.log('\nüîç Testing API response mapping...');
    const info = testInstructor.instructorInfo || {};
    const mappedApprovalStatus = info.instructor_profile_status || testInstructor.approval_status || 'pending';
    console.log(`   Mapped approvalStatus: ${mappedApprovalStatus}`);

    if (mappedApprovalStatus === 'approved') {
      console.log('‚úÖ API response mapping works correctly!');
    } else {
      console.log('‚ùå API response mapping issue detected!');
    }

    console.log('\nüéâ Test completed successfully!');

  } catch (error) {
    console.error('‚ùå Test failed:', error);
  } finally {
    mongoose.connection.close();
  }
}

testInstructorApproval();
