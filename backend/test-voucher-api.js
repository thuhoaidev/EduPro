const axios = require('axios');

const API_BASE = 'http://localhost:5000/api';

// Test data
const testVoucher = {
  code: 'TEST50',
  title: 'Test Voucher 50%',
  description: 'Voucher test gi·∫£m 50%',
  discountType: 'percentage',
  discountValue: 50,
  maxDiscount: 500000,
  minOrderValue: 100000,
  usageLimit: 10,
  usedCount: 0,
  categories: ['all'],
  tags: ['test'],
  isNew: true,
  isHot: false,
  isVipOnly: false,
  startDate: new Date(),
  endDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000) // 30 ng√†y
};

const testUser = {
  email: 'test@example.com',
  password: 'password123'
};

let authToken = '';
let voucherId = '';

async function testVoucherAPIs() {
  console.log('üß™ B·∫Øt ƒë·∫ßu test Voucher APIs...\n');

  try {
    // 1. Test l·∫•y danh s√°ch voucher (admin)
    console.log('1Ô∏è‚É£ Test l·∫•y danh s√°ch voucher (admin)...');
    try {
      const listResponse = await axios.get(`${API_BASE}/vouchers`);
      console.log('‚úÖ L·∫•y danh s√°ch voucher th√†nh c√¥ng');
      console.log('S·ªë l∆∞·ª£ng voucher:', listResponse.data.data.length);
    } catch (error) {
      console.log('‚ùå L·ªói khi l·∫•y danh s√°ch voucher:', error.message);
      if (error.code === 'ECONNREFUSED') {
        console.log('‚ö†Ô∏è Server ch∆∞a ch·∫°y. H√£y ch·∫°y "npm start" tr∆∞·ªõc');
        return;
      }
    }
    console.log('');

    // 2. Test l·∫•y danh s√°ch voucher kh·∫£ d·ª•ng (client)
    console.log('2Ô∏è‚É£ Test l·∫•y danh s√°ch voucher kh·∫£ d·ª•ng (client)...');
    try {
      const availableResponse = await axios.get(`${API_BASE}/vouchers/available`);
      console.log('‚úÖ L·∫•y danh s√°ch voucher kh·∫£ d·ª•ng th√†nh c√¥ng');
      console.log('S·ªë l∆∞·ª£ng voucher kh·∫£ d·ª•ng:', availableResponse.data.data.length);
      
      if (availableResponse.data.data.length > 0) {
        const voucher = availableResponse.data.data[0];
        console.log('Voucher ƒë·∫ßu ti√™n:', {
          code: voucher.code,
          title: voucher.title,
          status: voucher.status,
          statusMessage: voucher.statusMessage
        });
      }
    } catch (error) {
      console.log('‚ùå L·ªói khi l·∫•y voucher kh·∫£ d·ª•ng:', error.message);
    }
    console.log('');

    // 3. Test ƒëƒÉng nh·∫≠p ƒë·ªÉ l·∫•y token
    console.log('3Ô∏è‚É£ Test ƒëƒÉng nh·∫≠p...');
    try {
      const loginResponse = await axios.post(`${API_BASE}/auth/login`, testUser);
      authToken = loginResponse.data.data.token;
      console.log('‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng');
    } catch (loginError) {
      console.log('‚ö†Ô∏è Kh√¥ng th·ªÉ ƒëƒÉng nh·∫≠p, s·∫Ω test validate voucher m√† kh√¥ng c√≥ auth');
      console.log('L·ªói:', loginError.response?.data?.message || loginError.message);
    }
    console.log('');

    // 4. Test validate voucher
    console.log('4Ô∏è‚É£ Test validate voucher...');
    const validateData = {
      code: 'WELCOME50', // S·ª≠ d·ª•ng voucher c√≥ s·∫µn
      orderAmount: 200000
    };

    if (authToken) {
      // Test v·ªõi auth
      try {
        const validateResponse = await axios.post(`${API_BASE}/vouchers/validate`, validateData, {
          headers: { Authorization: `Bearer ${authToken}` }
        });
        console.log('‚úÖ Validate voucher th√†nh c√¥ng (c√≥ auth)');
        console.log('Discount amount:', validateResponse.data.data.discountAmount);
        console.log('Final amount:', validateResponse.data.data.finalAmount);
      } catch (validateError) {
        console.log('‚ö†Ô∏è Validate voucher th·∫•t b·∫°i:', validateError.response?.data?.message || validateError.message);
      }
    } else {
      // Test kh√¥ng c√≥ auth (s·∫Ω b√°o l·ªói)
      try {
        await axios.post(`${API_BASE}/vouchers/validate`, validateData);
      } catch (validateError) {
        console.log('‚úÖ Validate voucher tr·∫£ v·ªÅ l·ªói auth nh∆∞ mong ƒë·ª£i');
        console.log('L·ªói:', validateError.response?.data?.message || validateError.message);
      }
    }
    console.log('');

    // 5. Test validate voucher v·ªõi order amount th·∫•p
    console.log('5Ô∏è‚É£ Test validate voucher v·ªõi order amount th·∫•p...');
    if (authToken) {
      const validateLowAmountData = {
        code: 'WELCOME50',
        orderAmount: 50000 // Th·∫•p h∆°n minOrderValue (100000)
      };

      try {
        await axios.post(`${API_BASE}/vouchers/validate`, validateLowAmountData, {
          headers: { Authorization: `Bearer ${authToken}` }
        });
      } catch (validateError) {
        console.log('‚úÖ Validate voucher tr·∫£ v·ªÅ l·ªói order amount th·∫•p nh∆∞ mong ƒë·ª£i');
        console.log('L·ªói:', validateError.response?.data?.message || validateError.message);
      }
    }
    console.log('');

    // 6. Test validate voucher kh√¥ng t·ªìn t·∫°i
    console.log('6Ô∏è‚É£ Test validate voucher kh√¥ng t·ªìn t·∫°i...');
    if (authToken) {
      const validateInvalidData = {
        code: 'INVALID123',
        orderAmount: 200000
      };

      try {
        await axios.post(`${API_BASE}/vouchers/validate`, validateInvalidData, {
          headers: { Authorization: `Bearer ${authToken}` }
        });
      } catch (validateError) {
        console.log('‚úÖ Validate voucher tr·∫£ v·ªÅ l·ªói kh√¥ng t·ªìn t·∫°i nh∆∞ mong ƒë·ª£i');
        console.log('L·ªói:', validateError.response?.data?.message || validateError.message);
      }
    }
    console.log('');

    console.log('üéâ T·∫•t c·∫£ test ho√†n th√†nh!');

  } catch (error) {
    console.error('‚ùå L·ªói trong qu√° tr√¨nh test:', error.message);
    if (error.code === 'ECONNREFUSED') {
      console.log('‚ö†Ô∏è Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. H√£y ƒë·∫£m b·∫£o server ƒëang ch·∫°y v·ªõi "npm start"');
    }
  }
}

// Ch·∫°y test
testVoucherAPIs(); 