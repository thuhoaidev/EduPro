const mongoose = require('mongoose');
const Course = require('./src/models/Course');

// Connect to MongoDB
mongoose.connect('mongodb://localhost:27017/edupro');

async function listCourses() {
  try {
    console.log('üîç Listing all courses with their slugs...');
    
    const courses = await Course.find({})
      .select('title slug displayStatus status')
      .limit(20)
      .sort({ createdAt: -1 });
    
    if (courses.length > 0) {
      console.log(`\n‚úÖ Found ${courses.length} courses:`);
      courses.forEach((course, index) => {
        console.log(`${index + 1}. ${course.title}`);
        console.log(`   Slug: ${course.slug}`);
        console.log(`   Status: ${course.status} | Display: ${course.displayStatus}`);
        console.log('');
      });
    } else {
      console.log('‚ùå No courses found');
    }
    
    // T√¨m kh√≥a h·ªçc c√≥ t·ª´ "ph·∫ßn m·ªÅm nh√∫ng" ho·∫∑c "IoT"
    console.log('\nüîç Searching for courses with "ph·∫ßn m·ªÅm nh√∫ng" or "IoT"...');
    const searchCourses = await Course.find({
      $or: [
        { title: { $regex: 'ph·∫ßn m·ªÅm nh√∫ng', $options: 'i' } },
        { title: { $regex: 'IoT', $options: 'i' } },
        { title: { $regex: 'embedded', $options: 'i' } },
        { slug: { $regex: 'phan-mem-nhung', $options: 'i' } },
        { slug: { $regex: 'iot', $options: 'i' } }
      ]
    });
    
    if (searchCourses.length > 0) {
      console.log(`\nüéØ Found ${searchCourses.length} matching courses:`);
      searchCourses.forEach((course, index) => {
        console.log(`${index + 1}. ${course.title}`);
        console.log(`   Slug: ${course.slug}`);
        console.log(`   Status: ${course.status} | Display: ${course.displayStatus}`);
        console.log('');
      });
    } else {
      console.log('‚ùå No matching courses found');
    }
    
    process.exit(0);
  } catch (error) {
    console.error('‚ùå Error:', error.message);
    process.exit(1);
  }
}

listCourses();