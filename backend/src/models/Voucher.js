const mongoose = require("mongoose");

const voucherSchema = new mongoose.Schema({
  code: { type: String, required: true, unique: true },
  title: { type: String, required: true },
  description: { type: String, default: "" },

  discountType: { type: String, enum: ["percentage", "fixed"], required: true }, // 'percentage' | 'fixed'
  discountValue: { type: Number, required: true }, // Gi√° tr·ªã gi·∫£m
  maxDiscount: { type: Number, default: 0 }, // Gi·∫£m t·ªëi ƒëa (n·∫øu l√† % ho·∫∑c mu·ªën gi·ªõi h·∫°n)

  minOrderValue: { type: Number, default: 0 }, // ƒêi·ªÅu ki·ªán ƒë∆°n h√†ng t·ªëi thi·ªÉu
  usageLimit: { type: Number, required: true }, // S·ªë l∆∞·ª£t ƒë∆∞·ª£c s·ª≠ d·ª•ng t·ªëi ƒëa
  usedCount: { type: Number, default: 0 }, // S·ªë l∆∞·ª£t ƒë√£ s·ª≠ d·ª•ng

  categories: [{ type: String, default: [] }], // Danh s√°ch danh m·ª•c √°p d·ª•ng
  tags: [{ type: String, default: [] }], // Tag hi·ªÉn th·ªã
  isNew: { type: Boolean, default: false }, // C√≥ hi·ªÉn th·ªã tag "M·ªõi" kh√¥ng
  isHot: { type: Boolean, default: false }, // C√≥ hi·ªÉn th·ªã icon üî• kh√¥ng
  isVipOnly: { type: Boolean, default: false }, // Ch·ªâ d√†nh cho ng∆∞·ªùi d√πng VIP?

  startDate: { type: Date, required: true }, // Ng√†y b·∫Øt ƒë·∫ßu
  endDate: { type: Date }, // Ng√†y k·∫øt th√∫c
  createdAt: { type: Date, default: Date.now },
  updatedAt: { type: Date, default: Date.now },
});

module.exports = mongoose.model("Voucher", voucherSchema);
