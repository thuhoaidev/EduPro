const mongoose = require('mongoose');
const Order = require('../models/Order');
const Cart = require('../models/Cart');
const Voucher = require('../models/Voucher');
const VoucherUsage = require('../models/VoucherUsage');
const Enrollment = require('../models/Enrollment');
const TeacherWallet = require('../models/TeacherWallet');
const Course = require('../models/Course'); // N√™n th√™m r√µ r√†ng
const InstructorProfile = require('../models/InstructorProfile');
const Notification = require('../models/Notification');
const UserWallet = require('../models/UserWallet');

class OrderController {
  // T·∫°o ƒë∆°n h√†ng
  static async createOrder(req, res) {
    const session = await mongoose.startSession();
    session.startTransaction();

    try {
      console.log('üîç CreateOrder - Request body:', req.body);
      console.log('üîç CreateOrder - User:', req.user);

      const {
        items,
        voucherCode,
        paymentMethod = 'bank_transfer',
        shippingInfo,
        fullName,
        phone,
        email,
        notes
      } = req.body;

      // Handle both shippingInfo object and direct fields
      const orderFullName = fullName || (shippingInfo && shippingInfo.fullName);
      const orderPhone = phone || (shippingInfo && shippingInfo.phone);
      const orderEmail = email || (shippingInfo && shippingInfo.email);
      
      console.log('üîç CreateOrder - Processed fields:', {
        orderFullName,
        orderPhone,
        orderEmail,
        paymentMethod,
        itemsCount: items?.length
      });
      
      const userId = req.user.id;

      if (!items || items.length === 0) {
        await session.abortTransaction();
        return res.status(400).json({ success: false, message: 'Gi·ªè h√†ng tr·ªëng' });
      }

      // Validate required fields
      if (!orderFullName || !orderPhone || !orderEmail) {
        await session.abortTransaction();
        return res.status(400).json({ 
          success: false, 
          message: 'Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc: h·ªç t√™n, s·ªë ƒëi·ªán tho·∫°i ho·∫∑c email' 
        });
      }

      let totalAmount = 0;
      const orderItems = [];

      for (const item of items) {
        const course = await Course.findById(item.courseId).session(session);
        if (!course) {
          await session.abortTransaction();
          return res.status(404).json({
            success: false,
            message: `Kh√≥a h·ªçc ${item.courseId} kh√¥ng t·ªìn t·∫°i`
          });
        }

        const finalPrice = course.price * (1 - (course.discount || 0) / 100);
        totalAmount += finalPrice * (item.quantity || 1);

        orderItems.push({
          courseId: course._id,
          price: finalPrice,
          quantity: item.quantity || 1
        });
      }

      let discountAmount = 0;
      let voucherId = null;

      // X·ª≠ l√Ω m√£ gi·∫£m gi√°
      if (voucherCode) {
        const voucher = await Voucher.findOne({ code: voucherCode.toUpperCase() }).session(session);
        if (voucher) {
          const now = new Date();
          const isValid =
            voucher.startDate <= now &&
            (!voucher.endDate || voucher.endDate >= now) &&
            voucher.usedCount < voucher.usageLimit;

          if (isValid && totalAmount >= voucher.minOrderValue) {
            const used = await VoucherUsage.findOne({
              userId,
              voucherId: voucher._id
            }).session(session);

            if (!used) {
              if (voucher.discountType === 'percentage') {
                discountAmount = (totalAmount * voucher.discountValue) / 100;
                if (voucher.maxDiscount > 0) {
                  discountAmount = Math.min(discountAmount, voucher.maxDiscount);
                }
              } else {
                discountAmount = voucher.discountValue;
              }

              voucherId = voucher._id;
            }
          }
        }
      }

      const finalAmount = totalAmount - discountAmount;

      // N·∫øu thanh to√°n b·∫±ng v√≠, ki·ªÉm tra v√† tr·ª´ ti·ªÅn v√≠ tr∆∞·ªõc khi t·∫°o ƒë∆°n h√†ng
      if (paymentMethod === 'wallet') {
        let wallet = await UserWallet.findOne({ userId }).session(session);
        if (!wallet) {
          wallet = new UserWallet({ userId, balance: 0, history: [] });
        }
        if (wallet.balance < finalAmount) {
          await session.abortTransaction();
          return res.status(400).json({ success: false, message: 'S·ªë d∆∞ v√≠ kh√¥ng ƒë·ªß ƒë·ªÉ thanh to√°n!' });
        }
        wallet.balance -= finalAmount;
        wallet.history.push({
          type: 'payment',
          amount: -finalAmount,
          method: 'wallet',
          status: 'paid',
          note: `Thanh to√°n ƒë∆°n h√†ng kh√≥a h·ªçc`,
          createdAt: new Date()
        });
        await wallet.save({ session });
      }

      // T·∫°o ƒë∆°n h√†ng
      const order = new Order({
        userId,
        items: orderItems,
        totalAmount,
        discountAmount,
        finalAmount,
        voucherId,
        paymentMethod,
        fullName: orderFullName,
        phone: orderPhone,
        email: orderEmail,
        notes
      });

      await order.save({ session });

      // T·ª± ƒë·ªông chuy·ªÉn tr·∫°ng th√°i sang 'paid' v√† c·ªông ti·ªÅn v√†o v√≠ gi·∫£ng vi√™n
      order.status = 'paid';
      order.paymentStatus = 'paid';
      order.paidAt = new Date();
      await order.save({ session });

      // C·ªông ti·ªÅn v√†o v√≠ gi√°o vi√™n cho t·ª´ng kh√≥a h·ªçc trong ƒë∆°n h√†ng
      for (const item of orderItems) {
        const course = await Course.findById(item.courseId).session(session);
        if (!course) continue;
        if (!course.instructor) continue;
        const instructorProfile = await InstructorProfile.findById(course.instructor).session(session);
        if (!instructorProfile || !instructorProfile.user) continue;
        let wallet = await TeacherWallet.findOne({ teacherId: instructorProfile.user }).session(session);
        if (!wallet) {
          wallet = new TeacherWallet({ teacherId: instructorProfile.user, balance: 0, history: [] });
        }
        // Gi√°o vi√™n nh·∫≠n 40% gi√° g·ªëc, kh√¥ng b·ªã ·∫£nh h∆∞·ªüng b·ªüi voucher
        const earning = Math.round(course.price * 0.7 * (item.quantity || 1));
        wallet.balance += earning;
        wallet.history.push({
          type: 'earning',
          amount: earning,
          orderId: order._id,
          note: `B√°n kh√≥a h·ªçc: ${course.title} (70% gi√° g·ªëc)`
        });
        await wallet.save({ session });
      }

      // Ghi nh·∫≠n voucher usage
      if (voucherId) {
        await new VoucherUsage({
          userId,
          voucherId,
          orderId: order._id
        }).save({ session });

        // Ch·ªâ tƒÉng usedCount n·∫øu l√† voucher ph·ªï th√¥ng ho·∫∑c flash-sale
        const voucher = await Voucher.findById(voucherId).session(session);
        if (voucher && (voucher.type === 'default' || voucher.type === 'flash-sale')) {
          await Voucher.findByIdAndUpdate(voucherId, {
            $inc: { usedCount: 1 }
          }, { session });
        }
      }

      // Xo√° item ƒë√£ mua kh·ªèi gi·ªè h√†ng
      const cart = await Cart.findOne({ user: userId }).session(session);
      if (cart) {
        const courseIds = items.map(item => item.courseId.toString());
        cart.items = cart.items.filter(item => !courseIds.includes(item.course.toString()));
        await cart.save({ session });
      }

      // T·∫°o enrollment cho t·∫•t c·∫£ kh√≥a h·ªçc trong ƒë∆°n h√†ng
      const enrollments = [];
      for (const item of orderItems) {
        // Ki·ªÉm tra xem user ƒë√£ enrollment kh√≥a h·ªçc n√†y ch∆∞a
        const existingEnrollment = await Enrollment.findOne({
          student: userId,
          course: item.courseId
        }).session(session);

        if (!existingEnrollment) {
          enrollments.push({
            student: userId,
            course: item.courseId,
            enrolledAt: new Date()
          });
        }
      }

      if (enrollments.length > 0) {
        await Enrollment.insertMany(enrollments, { session });
      }

      await session.commitTransaction();
      await order.populate([
        {
          path: 'items.courseId',
          select: 'title thumbnail price'
        },
        {
          path: 'voucherId',
          select: 'code title discountType discountValue'
        }
      ]);
      // G·ª≠i th√¥ng b√°o cho user khi thanh to√°n th√†nh c√¥ng
      const notification = await Notification.create({
        title: 'Thanh to√°n th√†nh c√¥ng',
        content: `ƒê∆°n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c thanh to√°n th√†nh c√¥ng. C·∫£m ∆°n b·∫°n ƒë√£ mua h√†ng!`,
        type: 'success',
        receiver: userId,
        icon: 'credit-card',
        meta: { link: `/orders/${order._id}` }
      });
      const io = req.app.get && req.app.get('io');
      if (io && notification.receiver) {
        io.to(notification.receiver.toString()).emit('new-notification', notification);
      }
      return res.status(201).json({
        success: true,
        message: 'T·∫°o ƒë∆°n h√†ng th√†nh c√¥ng',
        data: {
          order: {
            id: order._id,
            items: order.items,
            totalAmount: order.totalAmount,
            discountAmount: order.discountAmount,
            finalAmount: order.finalAmount,
            voucher: order.voucherId,
            paymentMethod: order.paymentMethod,
            fullName: order.fullName,
            phone: order.phone,
            email: order.email,
            createdAt: order.createdAt
          }
        }
      });
    } catch (err) {
      await session.abortTransaction();
      console.error('‚ùå Create order error details:', {
        message: err.message,
        stack: err.stack,
        body: req.body,
        user: req.user
      });
      res.status(500).json({ success: false, message: 'L·ªói t·∫°o ƒë∆°n h√†ng', error: err.message });
    } finally {
      session.endSession();
    }
  }

  // L·∫•y danh s√°ch ƒë∆°n h√†ng c·ªßa user
  static async getUserOrders(req, res) {
    try {
      const userId = req.user.id;
      console.log('üîç getUserOrders - User ID:', userId);
      console.log('üîç getUserOrders - User object:', req.user);
      
      const { page = 1, limit = 10, status } = req.query;

      const filter = { userId };
      if (status) filter.status = status;

      console.log('üîç getUserOrders - Filter:', filter);

      const orders = await Order.find(filter)
        .populate('items.courseId', 'title thumbnail price')
        .populate('voucherId', 'code title')
        .sort({ createdAt: -1 })
        .limit(limit * 1)
        .skip((page - 1) * limit);

      console.log('üîç getUserOrders - Found orders count:', orders.length);

      const total = await Order.countDocuments(filter);

      return res.json({
        success: true,
        message: 'L·∫•y danh s√°ch ƒë∆°n h√†ng th√†nh c√¥ng',
        data: {
          orders: orders.map(order => ({
            id: order._id,
            items: order.items,
            totalAmount: order.totalAmount,
            discountAmount: order.discountAmount,
            finalAmount: order.finalAmount,
            voucher: order.voucherId,
            paymentMethod: order.paymentMethod,
            fullName: order.fullName,
            phone: order.phone,
            email: order.email,
            createdAt: order.createdAt
          })),
          pagination: {
            current: Number(page),
            total: Math.ceil(total / limit),
            pageSize: Number(limit)
          }
        }
      });
    } catch (err) {
      console.error('Get user orders error:', err);
      res.status(500).json({ success: false, message: 'L·ªói khi l·∫•y danh s√°ch ƒë∆°n h√†ng', error: err.message });
    }
  }

  // L·∫•y chi ti·∫øt ƒë∆°n h√†ng
  static async getOrderDetail(req, res) {
    try {
      const { id } = req.params;
      const userId = req.user.id;

      const order = await Order.findOne({ _id: id, userId })
        .populate('items.courseId', 'title thumbnail price discount description')
        .populate('voucherId', 'code title discountType discountValue');

      if (!order) {
        return res.status(404).json({ success: false, message: 'ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i' });
      }

      return res.json({
        success: true,
        message: 'L·∫•y chi ti·∫øt ƒë∆°n h√†ng th√†nh c√¥ng',
        data: {
          order: {
            id: order._id,
            items: order.items,
            totalAmount: order.totalAmount,
            discountAmount: order.discountAmount,
            finalAmount: order.finalAmount,
            voucher: order.voucherId,
            paymentMethod: order.paymentMethod,
            notes: order.notes,
            fullName: order.fullName,
            phone: order.phone,
            email: order.email,
            createdAt: order.createdAt,
            updatedAt: order.updatedAt
          }
        }
      });
    } catch (err) {
      console.error('Get order detail error:', err);
      res.status(500).json({ success: false, message: 'L·ªói khi l·∫•y chi ti·∫øt ƒë∆°n h√†ng', error: err.message });
    }
  }

  // H·ªßy ƒë∆°n h√†ng
  static async cancelOrder(req, res) {
    try {
      const { id } = req.params;
      const userId = req.user.id;

      const order = await Order.findOne({ _id: id, userId });
      if (!order) return res.status(404).json({ success: false, message: 'ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i' });

      if (order.status !== 'pending') {
        return res.status(400).json({ success: false, message: 'Ch·ªâ c√≥ th·ªÉ h·ªßy ƒë∆°n h√†ng ƒëang ch·ªù x·ª≠ l√Ω' });
      }

      order.status = 'cancelled';
      order.cancelledAt = new Date();
      await order.save();

      return res.json({ success: true, message: 'H·ªßy ƒë∆°n h√†ng th√†nh c√¥ng' });
    } catch (err) {
      console.error('Cancel order error:', err);
      res.status(500).json({ success: false, message: 'L·ªói khi h·ªßy ƒë∆°n h√†ng', error: err.message });
    }
  }

  // Admin: Ho√†n t·∫•t thanh to√°n
  static async completePayment(req, res) {
    try {
      const { id } = req.params;
      const { paymentMethod } = req.body;

      const order = await Order.findById(id);
      if (!order) return res.status(404).json({ success: false, message: 'ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i' });

      if (order.status !== 'pending') {
        return res.status(400).json({ success: false, message: 'ƒê∆°n h√†ng kh√¥ng ·ªü tr·∫°ng th√°i ch·ªù x·ª≠ l√Ω' });
      }

      order.status = 'paid';
      order.paymentStatus = 'paid';
      order.paymentMethod = paymentMethod || order.paymentMethod;
      order.paidAt = new Date();
      await order.save();

      // C·ªông ti·ªÅn v√†o v√≠ gi√°o vi√™n cho t·ª´ng kh√≥a h·ªçc trong ƒë∆°n h√†ng
      for (const item of order.items) {
        const course = await Course.findById(item.courseId);
        if (!course) {
          console.log('Kh√¥ng t√¨m th·∫•y course:', item.courseId);
          continue;
        }
        if (!course.instructor) {
          console.log('Course kh√¥ng c√≥ instructor:', course._id);
          continue;
        }
        // L·∫•y InstructorProfile
        const instructorProfile = await InstructorProfile.findById(course.instructor);
        if (!instructorProfile) {
          console.log('Kh√¥ng t√¨m th·∫•y InstructorProfile:', course.instructor);
          continue;
        }
        if (!instructorProfile.user) {
          console.log('InstructorProfile kh√¥ng c√≥ user:', instructorProfile._id);
          continue;
        }
        // T√¨m ho·∫∑c t·∫°o v√≠ gi√°o vi√™n
        let wallet = await TeacherWallet.findOne({ teacherId: instructorProfile.user });
        if (!wallet) {
          wallet = new TeacherWallet({ teacherId: instructorProfile.user, balance: 0, history: [] });
        }
        // Gi√°o vi√™n nh·∫≠n 40% gi√° g·ªëc, kh√¥ng b·ªã ·∫£nh h∆∞·ªüng b·ªüi voucher
        const earning = Math.round(course.price * 0.7 * (item.quantity || 1));
        wallet.balance += earning;
        wallet.history.push({
          type: 'earning',
          amount: earning,
          orderId: order._id,
          note: `B√°n kh√≥a h·ªçc: ${course.title} (70% gi√° g·ªëc)`
        });
        await wallet.save();
        console.log(`ƒê√£ c·ªông ${earning} v√†o v√≠ gi√°o vi√™n ${instructorProfile.user} cho kh√≥a h·ªçc ${course.title}`);
      }

      const enrollments = order.items.map(item => ({
        userId: order.userId,
        courseId: item.courseId,
        orderId: order._id,
        enrolledAt: new Date()
      }));

      await Enrollment.insertMany(enrollments);

      return res.json({ success: true, message: 'Ho√†n th√†nh thanh to√°n th√†nh c√¥ng' });
    } catch (err) {
      console.error('Complete payment error:', err);
      res.status(500).json({ success: false, message: 'L·ªói khi ho√†n th√†nh thanh to√°n', error: err.message });
    }
  }

  static async getOrders(req, res) {
    try {
      const { page = 1, pageSize = 100 } = req.query;
      const skip = (parseInt(page) - 1) * parseInt(pageSize);
      const limit = parseInt(pageSize);

      // L·∫•y roleName t·ª´ user
      const roleName = req.user?.role_id?.name;

      // N·∫øu l√† admin th√¨ l·∫•y t·∫•t c·∫£, c√≤n l·∫°i th√¨ ch·ªâ l·∫•y ƒë∆°n h√†ng c·ªßa user ƒë√≥
      let query = {};
      if (roleName !== 'admin') {
        query.userId = req.user._id;
      }

      // ƒê·∫øm t·ªïng s·ªë ƒë∆°n h√†ng kh·ªõp
      const total = await Order.countDocuments(query);

      // Truy v·∫•n danh s√°ch ƒë∆°n h√†ng v·ªõi ph√¢n trang
      const orders = await Order.find(query)
        .sort({ createdAt: -1 })
        .skip(skip)
        .limit(limit)
        .populate({
          path: 'items.courseId',
          select: 'title thumbnail',
        })
        .populate({
          path: 'voucherId',
          select: 'title code',
        });

      res.json({
        orders,
        pagination: {
          current: parseInt(page),
          total,
          pageSize: limit,
        },
      });
    } catch (error) {
      res.status(500).json({ message: 'L·ªói l·∫•y danh s√°ch ƒë∆°n h√†ng', error: error.message });
    }
  }

  // Ki·ªÉm tra ƒëi·ªÅu ki·ªán ho√†n ti·ªÅn cho m·ªôt kh√≥a h·ªçc
  static async checkRefundEligibility(req, res) {
    try {
      const { courseId } = req.params;
      const userId = req.user.id;
      
      if (!courseId) {
        return res.status(400).json({ success: false, message: 'Thi·∫øu courseId' });
      }

      // T√¨m ƒë∆°n h√†ng ƒë√£ thanh to√°n ch·ª©a kh√≥a h·ªçc n√†y
      const order = await Order.findOne({ 
        userId, 
        status: 'paid',
        'items.courseId': courseId 
      }).sort({ createdAt: -1 });

      if (!order) {
        return res.json({ 
          success: true, 
          eligible: false, 
          reason: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng ƒë√£ thanh to√°n cho kh√≥a h·ªçc n√†y' 
        });
      }

      // Ki·ªÉm tra ƒë√£ ho√†n ti·ªÅn ch∆∞a
      if (order.status === 'refunded' || order.refundedAt) {
        return res.json({ 
          success: true, 
          eligible: false, 
          reason: 'ƒê∆°n h√†ng ƒë√£ ho√†n ti·ªÅn tr∆∞·ªõc ƒë√≥' 
        });
      }

      // Ki·ªÉm tra th·ªùi gian mua
      const now = new Date();
      const created = new Date(order.createdAt);
      const diffDays = (now.getTime() - created.getTime()) / (1000 * 3600 * 24);
      if (diffDays > 7) {
        return res.json({ 
          success: true, 
          eligible: false, 
          reason: 'ƒê√£ qu√° th·ªùi gian ho√†n ti·ªÅn (7 ng√†y)' 
        });
      }

      // Ki·ªÉm tra ti·∫øn ƒë·ªô h·ªçc
      const Enrollment = require('../models/Enrollment');
      const Section = require('../models/Section');
      const Lesson = require('../models/Lesson');
      
      const enrollment = await Enrollment.findOne({ student: userId, course: courseId });
      let progressPercentage = 0;
      
      if (enrollment && enrollment.progress) {
        // L·∫•y t·∫•t c·∫£ b√†i h·ªçc c·ªßa kh√≥a h·ªçc
        const sections = await Section.find({ course_id: courseId }).sort({ position: 1 });
        let totalLessons = 0;
        let completedLessons = 0;
        
        for (const section of sections) {
          if (section.lessons && section.lessons.length > 0) {
            const lessons = await Lesson.find({ _id: { $in: section.lessons } });
            totalLessons += lessons.length;
            
            for (const lesson of lessons) {
              const lessonId = String(lesson._id);
              const progress = enrollment.progress[lessonId];
              // Ch·ªâ t√≠nh l√† ho√†n th√†nh khi completed = true (ƒë√£ xem ƒë·ªß video v√† qua quiz)
              if (progress && progress.completed === true) {
                completedLessons++;
              }
            }
          }
        }
        
        // T√≠nh ph·∫ßn trƒÉm ti·∫øn ƒë·ªô
        progressPercentage = totalLessons > 0 ? (completedLessons / totalLessons) * 100 : 0;
        
        if (progressPercentage > 20) {
          return res.json({ 
            success: true, 
            eligible: false, 
            reason: `Ti·∫øn ƒë·ªô h·ªçc ƒë√£ v∆∞·ª£t qu√° 20% (hi·ªán t·∫°i: ${Math.round(progressPercentage)}%)` 
          });
        }
      }

      return res.json({ 
        success: true, 
        eligible: true, 
        orderId: order._id,
        progressPercentage: Math.round(progressPercentage),
        daysRemaining: Math.max(0, 7 - Math.floor(diffDays))
      });

    } catch (err) {
      return res.status(500).json({ success: false, message: 'L·ªói ki·ªÉm tra ƒëi·ªÅu ki·ªán ho√†n ti·ªÅn', error: err.message });
    }
  }

  // Ho√†n ti·ªÅn 70% chi ph√≠ v√†o v√≠ user n·∫øu ƒë∆°n h√†ng ch·ª©a courseId v√† mua d∆∞·ªõi 7 ng√†y, ch∆∞a ho√†n ti·ªÅn tr∆∞·ªõc ƒë√≥
  static async refundOrder(req, res) {
    const session = await mongoose.startSession();
    session.startTransaction();
    try {
      const { id } = req.params; // orderId
      const { courseId } = req.body;
      const userId = req.user.id;
      if (!id || !courseId) {
        await session.abortTransaction();
        return res.status(400).json({ success: false, message: 'Thi·∫øu orderId ho·∫∑c courseId' });
      }
      // T√¨m ƒë∆°n h√†ng
      const order = await Order.findOne({ _id: id, userId }).session(session);
      if (!order) {
        await session.abortTransaction();
        return res.status(404).json({ success: false, message: 'ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i' });
      }
      // Ki·ªÉm tra ƒë∆°n h√†ng c√≥ ch·ª©a kh√≥a h·ªçc n√†y kh√¥ng
      const item = order.items.find(i => String(i.courseId) === String(courseId));
      if (!item) {
        await session.abortTransaction();
        return res.status(400).json({ success: false, message: 'ƒê∆°n h√†ng kh√¥ng ch·ª©a kh√≥a h·ªçc n√†y' });
      }
      // Ki·ªÉm tra ƒë√£ ho√†n ti·ªÅn ch∆∞a (d·ª±a v√†o refundedAt ho·∫∑c status)
      if (order.status === 'refunded' || order.refundedAt) {
        await session.abortTransaction();
        return res.status(400).json({ success: false, message: 'ƒê∆°n h√†ng ƒë√£ ho√†n ti·ªÅn tr∆∞·ªõc ƒë√≥' });
      }
      // Ki·ªÉm tra th·ªùi gian mua
      const now = new Date();
      const created = new Date(order.createdAt);
      const diffDays = (now.getTime() - created.getTime()) / (1000 * 3600 * 24);
      if (diffDays > 7) {
        await session.abortTransaction();
        return res.status(400).json({ success: false, message: 'ƒê√£ qu√° th·ªùi gian ho√†n ti·ªÅn (7 ng√†y)' });
      }

      // Ki·ªÉm tra ti·∫øn ƒë·ªô h·ªçc - n·∫øu v∆∞·ª£t qu√° 20% th√¨ kh√¥ng ƒë∆∞·ª£c ho√†n ti·ªÅn
      const Enrollment = require('../models/Enrollment');
      const Section = require('../models/Section');
      const Lesson = require('../models/Lesson');
      
      const enrollment = await Enrollment.findOne({ student: userId, course: courseId }).session(session);
      if (enrollment && enrollment.progress) {
        // L·∫•y t·∫•t c·∫£ b√†i h·ªçc c·ªßa kh√≥a h·ªçc
        const sections = await Section.find({ course_id: courseId }).sort({ position: 1 }).session(session);
        let totalLessons = 0;
        let completedLessons = 0;
        
        for (const section of sections) {
          if (section.lessons && section.lessons.length > 0) {
            const lessons = await Lesson.find({ _id: { $in: section.lessons } }).session(session);
            totalLessons += lessons.length;
            
            for (const lesson of lessons) {
              const lessonId = String(lesson._id);
              const progress = enrollment.progress[lessonId];
              // Ch·ªâ t√≠nh l√† ho√†n th√†nh khi completed = true (ƒë√£ xem ƒë·ªß video v√† qua quiz)
              if (progress && progress.completed === true) {
                completedLessons++;
              }
            }
          }
        }
        
        // T√≠nh ph·∫ßn trƒÉm ti·∫øn ƒë·ªô
        const progressPercentage = totalLessons > 0 ? (completedLessons / totalLessons) * 100 : 0;
        
        if (progressPercentage > 20) {
          await session.abortTransaction();
          return res.status(400).json({ 
            success: false, 
            message: `Kh√¥ng th·ªÉ ho√†n ti·ªÅn v√¨ ti·∫øn ƒë·ªô h·ªçc ƒë√£ v∆∞·ª£t qu√° 20% (hi·ªán t·∫°i: ${Math.round(progressPercentage)}%)` 
          });
        }
      }

      // T√≠nh s·ªë ti·ªÅn ho√†n l·∫°i (70% gi√° ƒë√£ tr·∫£ cho kh√≥a h·ªçc n√†y)
      const refundAmount = Math.round(item.price * 0.7 * (item.quantity || 1));
      // C·ªông ti·ªÅn v√†o v√≠ user
      let wallet = await UserWallet.findOne({ userId }).session(session);
      if (!wallet) {
        wallet = new UserWallet({ userId, balance: 0, history: [] });
      }
      wallet.balance += refundAmount;
      wallet.history.push({
        type: 'deposit',
        amount: refundAmount,
        method: 'refund',
        status: 'approved',
        note: `Ho√†n ti·ªÅn 70% cho kh√≥a h·ªçc ${courseId} t·ª´ ƒë∆°n h√†ng ${id}`,
        createdAt: new Date()
      });
      await wallet.save({ session });
      // ƒê√°nh d·∫•u ƒë∆°n h√†ng ƒë√£ ho√†n ti·ªÅn (n·∫øu ch·ªâ ho√†n cho 1 kh√≥a h·ªçc, c√≥ th·ªÉ c·∫ßn flag ri√™ng)
      order.status = 'refunded';
      order.refundedAt = new Date();
      await order.save({ session });

      // X√≥a enrollment c·ªßa user v·ªõi kh√≥a h·ªçc n√†y
      await Enrollment.deleteOne({ student: userId, course: courseId }).session(session);

      await session.commitTransaction();
      return res.json({ success: true, message: 'Ho√†n ti·ªÅn th√†nh c√¥ng', refundAmount });
    } catch (err) {
      await session.abortTransaction();
      return res.status(500).json({ success: false, message: 'L·ªói ho√†n ti·ªÅn', error: err.message });
    }
  }
}

module.exports = OrderController;
