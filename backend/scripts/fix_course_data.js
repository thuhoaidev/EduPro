const mongoose = require('mongoose');
require('dotenv').config();

// K·∫øt n·ªëi MongoDB
mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/edupro', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

// Import models
const Course = require('../src/models/Course');
const Category = require('../src/models/Category');

async function fixCourseData() {
  try {
    const slug = 'khoa-hoc-react-tu-co-ban-den-nang-cao';
    console.log(`üîß ƒêang fix d·ªØ li·ªáu cho kh√≥a h·ªçc: ${slug}`);
    
    // T√¨m kh√≥a h·ªçc
    const course = await Course.findOne({ slug });
    if (!course) {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc!');
      return;
    }
    
    console.log(`‚úÖ T√¨m th·∫•y kh√≥a h·ªçc: ${course.title}`);
    console.log(`   Category ID hi·ªán t·∫°i: ${course.category}`);
    console.log(`   Discount hi·ªán t·∫°i: ${course.discount}%`);
    
    // Fix discount n·∫øu v∆∞·ª£t qu√° 100%
    if (course.discount > 100) {
      console.log(`‚ö†Ô∏è  Discount ${course.discount}% v∆∞·ª£t qu√° 100%, ƒëang fix th√†nh 50%...`);
      course.discount = 50;
    }
    
    // Fix category
    const currentCategory = await Category.findById(course.category);
    if (!currentCategory) {
      console.log('‚ùå Category hi·ªán t·∫°i kh√¥ng t·ªìn t·∫°i, ƒëang t√¨m category ph√π h·ª£p...');
      
      // T√¨m category ph√π h·ª£p
      let targetCategory = await Category.findOne({
        $or: [
          { name: { $regex: /react/i } },
          { name: { $regex: /frontend/i } },
          { name: { $regex: /javascript/i } },
          { name: { $regex: /web development/i } }
        ]
      });
      
      if (!targetCategory) {
        console.log('‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y category ph√π h·ª£p, ƒëang t·∫°o category m·ªõi...');
        
        // T·∫°o category m·ªõi
        targetCategory = new Category({
          name: 'Frontend Development',
          description: 'Kh√≥a h·ªçc v·ªÅ ph√°t tri·ªÉn giao di·ªán ng∆∞·ªùi d√πng',
          slug: 'frontend-development'
        });
        
        await targetCategory.save();
        console.log(`‚úÖ ƒê√£ t·∫°o category m·ªõi: ${targetCategory.name} (ID: ${targetCategory._id})`);
      } else {
        console.log(`‚úÖ T√¨m th·∫•y category ph√π h·ª£p: ${targetCategory.name} (ID: ${targetCategory._id})`);
      }
      
      course.category = targetCategory._id;
    }
    
    // L∆∞u thay ƒë·ªïi
    await course.save();
    
    console.log(`‚úÖ ƒê√£ fix d·ªØ li·ªáu kh√≥a h·ªçc th√†nh c√¥ng!`);
    console.log(`   Category: ${course.category}`);
    console.log(`   Discount: ${course.discount}%`);
    
    // Ki·ªÉm tra l·∫°i
    const updatedCourse = await Course.findOne({ slug })
      .populate('category', 'name')
      .populate({
        path: 'instructor',
        populate: {
          path: 'user',
          select: 'fullname avatar'
        }
      });
    
    console.log(`‚úÖ Ki·ªÉm tra l·∫°i:`);
    console.log(`   - Category: ${updatedCourse.category?.name || 'N/A'}`);
    console.log(`   - Instructor: ${updatedCourse.instructor?.user?.fullname || 'N/A'}`);
    console.log(`   - Discount: ${updatedCourse.discount}%`);
    
  } catch (error) {
    console.error('‚ùå L·ªói khi fix d·ªØ li·ªáu kh√≥a h·ªçc:', error);
  } finally {
    mongoose.connection.close();
    console.log('üîå ƒê√£ ƒë√≥ng k·∫øt n·ªëi MongoDB');
  }
}

// Ch·∫°y script
fixCourseData(); 