const mongoose = require('mongoose');
const { Role } = require('../src/models/Role');
require('dotenv').config();

// T·∫•t c·∫£ permissions t·ª´ frontend
const ALL_PERMISSIONS = [
  // User Management
  'qu·∫£n l√Ω ng∆∞·ªùi d√πng',
  'ph√¢n quy·ªÅn ng∆∞·ªùi d√πng',
  'kh√≥a m·ªü ng∆∞·ªùi d√πng',
  'duy·ªát gi·∫£ng vi√™n',
  
  // Content Management
  'qu·∫£n l√Ω kh√≥a h·ªçc',
  'qu·∫£n l√Ω b√†i vi·∫øt',
  'qu·∫£n l√Ω b√¨nh lu·∫≠n',
  'qu·∫£n l√Ω danh m·ª•c',
  
  // System Management
  'qu·∫£n l√Ω vai tr√≤',
  'qu·∫£n l√Ω voucher',
  'qu·∫£n l√Ω thanh to√°n',
  'qu·∫£n l√Ω b√°o c√°o',
  
  // Statistics & Reports
  'xem th·ªëng k√™ t·ªïng quan',
  'xem th·ªëng k√™ doanh thu',
  'xem th·ªëng k√™ ng∆∞·ªùi d√πng',
  'xem th·ªëng k√™ kh√≥a h·ªçc',
  
  // Course Management (Instructor)
  't·∫°o kh√≥a h·ªçc',
  'ch·ªânh s·ª≠a kh√≥a h·ªçc',
  'x√≥a kh√≥a h·ªçc',
  'xu·∫•t b·∫£n kh√≥a h·ªçc',
  
  // Content Management (Instructor)
  't·∫°o b√†i h·ªçc',
  'ch·ªânh s·ª≠a b√†i h·ªçc',
  'x√≥a b√†i h·ªçc',
  'upload video',
  't·∫°o quiz',
  'ch·ªânh s·ª≠a quiz',
  
  // Student Management
  'xem danh s√°ch h·ªçc vi√™n',
  'xem ti·∫øn ƒë·ªô h·ªçc vi√™n',
  'g·ª≠i th√¥ng b√°o',
  
  // Income
  'xem th·ªëng k√™ thu nh·∫≠p',
  'r√∫t ti·ªÅn',
  'xem l·ªãch s·ª≠ giao d·ªãch',
  
  // Learning (Student)
  'xem kh√≥a h·ªçc',
  'ƒëƒÉng k√Ω kh√≥a h·ªçc',
  'xem b√†i h·ªçc',
  'l√†m quiz',
  'xem ti·∫øn ƒë·ªô',
  't·∫°o ghi ch√∫',
  
  // Interaction
  'b√¨nh lu·∫≠n b√†i h·ªçc',
  'ƒë√°nh gi√° kh√≥a h·ªçc',
  'b√°o c√°o v·∫•n ƒë·ªÅ',
  
  // Community
  'xem b√†i vi·∫øt',
  'b√¨nh lu·∫≠n b√†i vi·∫øt',
  'th√≠ch l∆∞u b√†i vi·∫øt',
  
  // Certificate
  'xem ch·ª©ng ch·ªâ',
  't·∫£i ch·ª©ng ch·ªâ',
  
  // Content Moderation
  'duy·ªát b√†i vi·∫øt',
  't·ª´ ch·ªëi b√†i vi·∫øt',
  'duy·ªát b√¨nh lu·∫≠n',
  'x√≥a b√¨nh lu·∫≠n',
  
  // Report Handling
  'xem b√°o c√°o',
  'x·ª≠ l√Ω b√°o c√°o',
  'c·∫£nh c√°o ng∆∞·ªùi d√πng',
  
  // Community Management
  'qu·∫£n l√Ω t·ª´ kh√≥a',
  'xem th·ªëng k√™ b√°o c√°o',
  
  // Public View
  'xem kh√≥a h·ªçc c√¥ng khai',
  'xem b√†i vi·∫øt c√¥ng khai',
  't√¨m ki·∫øm kh√≥a h·ªçc',
  'xem gi·∫£ng vi√™n',
];

async function setupAdminPermissions() {
  try {
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb+srv://edupro:edupro123@cluster0.qjwuxzj.mongodb.net/edupro');
    console.log('Connected to MongoDB');

    // T√¨m ho·∫∑c t·∫°o admin role
    let adminRole = await Role.findOne({ name: 'admin' });
    
    if (!adminRole) {
      console.log('Creating admin role...');
      adminRole = new Role({
        name: 'admin',
        description: 'Qu·∫£n tr·ªã vi√™n h·ªá th·ªëng',
        permissions: ALL_PERMISSIONS
      });
    } else {
      console.log('Updating admin role permissions...');
      adminRole.permissions = ALL_PERMISSIONS;
    }

    await adminRole.save();
    console.log('‚úÖ Admin role updated with all permissions');
    console.log('Total permissions:', adminRole.permissions.length);

    // T·∫°o c√°c role kh√°c n·∫øu ch∆∞a c√≥
    const roles = [
      {
        name: 'instructor',
        description: 'Gi·∫£ng vi√™n',
        permissions: [
          't·∫°o kh√≥a h·ªçc', 'ch·ªânh s·ª≠a kh√≥a h·ªçc', 'x√≥a kh√≥a h·ªçc', 'xu·∫•t b·∫£n kh√≥a h·ªçc',
          't·∫°o b√†i h·ªçc', 'ch·ªânh s·ª≠a b√†i h·ªçc', 'x√≥a b√†i h·ªçc', 'upload video',
          't·∫°o quiz', 'ch·ªânh s·ª≠a quiz', 'xem danh s√°ch h·ªçc vi√™n', 'xem ti·∫øn ƒë·ªô h·ªçc vi√™n',
          'g·ª≠i th√¥ng b√°o', 'xem th·ªëng k√™ thu nh·∫≠p', 'r√∫t ti·ªÅn', 'xem l·ªãch s·ª≠ giao d·ªãch'
        ]
      },
      {
        name: 'student',
        description: 'H·ªçc vi√™n',
        permissions: [
          'xem kh√≥a h·ªçc', 'ƒëƒÉng k√Ω kh√≥a h·ªçc', 'xem b√†i h·ªçc', 'l√†m quiz',
          'xem ti·∫øn ƒë·ªô', 't·∫°o ghi ch√∫', 'b√¨nh lu·∫≠n b√†i h·ªçc', 'ƒë√°nh gi√° kh√≥a h·ªçc',
          'b√°o c√°o v·∫•n ƒë·ªÅ', 'xem b√†i vi·∫øt', 'b√¨nh lu·∫≠n b√†i vi·∫øt', 'th√≠ch l∆∞u b√†i vi·∫øt',
          'xem ch·ª©ng ch·ªâ', 't·∫£i ch·ª©ng ch·ªâ', 'xem kh√≥a h·ªçc c√¥ng khai', 'xem b√†i vi·∫øt c√¥ng khai',
          't√¨m ki·∫øm kh√≥a h·ªçc', 'xem gi·∫£ng vi√™n'
        ]
      },
      {
        name: 'moderator',
        description: 'Ki·ªÉm duy·ªát vi√™n',
        permissions: [
          'duy·ªát b√†i vi·∫øt', 't·ª´ ch·ªëi b√†i vi·∫øt', 'duy·ªát b√¨nh lu·∫≠n', 'x√≥a b√¨nh lu·∫≠n',
          'xem b√°o c√°o', 'x·ª≠ l√Ω b√°o c√°o', 'c·∫£nh c√°o ng∆∞·ªùi d√πng', 'qu·∫£n l√Ω t·ª´ kh√≥a',
          'xem th·ªëng k√™ b√°o c√°o'
        ]
      }
    ];

    for (const roleData of roles) {
      let role = await Role.findOne({ name: roleData.name });
      if (!role) {
        console.log(`Creating ${roleData.name} role...`);
        role = new Role(roleData);
        await role.save();
        console.log(`‚úÖ Created ${roleData.name} role`);
      } else {
        console.log(`Updating ${roleData.name} role...`);
        role.permissions = roleData.permissions;
        await role.save();
        console.log(`‚úÖ Updated ${roleData.name} role`);
      }
    }

    console.log('üéâ All roles and permissions setup completed!');

  } catch (error) {
    console.error('Error:', error);
  } finally {
    await mongoose.disconnect();
    console.log('Disconnected from MongoDB');
  }
}

setupAdminPermissions(); 