const mongoose = require('mongoose');
require('dotenv').config();

// K·∫øt n·ªëi MongoDB
mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/edupro', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

// Import Course model
const Course = require('../src/models/Course');

async function updateCourseViews() {
  try {
    console.log('üîç ƒêang ki·ªÉm tra c√°c kh√≥a h·ªçc thi·∫øu tr∆∞·ªùng views...');
    
    // T√¨m t·∫•t c·∫£ kh√≥a h·ªçc kh√¥ng c√≥ tr∆∞·ªùng views
    const coursesWithoutViews = await Course.find({ views: { $exists: false } });
    
    if (coursesWithoutViews.length === 0) {
      console.log('‚úÖ T·∫•t c·∫£ kh√≥a h·ªçc ƒë√£ c√≥ tr∆∞·ªùng views!');
      return;
    }
    
    console.log(`üìä T√¨m th·∫•y ${coursesWithoutViews.length} kh√≥a h·ªçc thi·∫øu tr∆∞·ªùng views`);
    
    // Update t·∫•t c·∫£ kh√≥a h·ªçc thi·∫øu tr∆∞·ªùng views
    const result = await Course.updateMany(
      { views: { $exists: false } },
      { $set: { views: 0 } }
    );
    
    console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t ${result.modifiedCount} kh√≥a h·ªçc v·ªõi tr∆∞·ªùng views = 0`);
    
    // Ki·ªÉm tra l·∫°i
    const remainingCourses = await Course.find({ views: { $exists: false } });
    if (remainingCourses.length === 0) {
      console.log('‚úÖ Ho√†n th√†nh! T·∫•t c·∫£ kh√≥a h·ªçc ƒë√£ c√≥ tr∆∞·ªùng views');
    } else {
      console.log(`‚ö†Ô∏è  V·∫´n c√≤n ${remainingCourses.length} kh√≥a h·ªçc thi·∫øu tr∆∞·ªùng views`);
    }
    
  } catch (error) {
    console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t tr∆∞·ªùng views:', error);
  } finally {
    mongoose.connection.close();
    console.log('üîå ƒê√£ ƒë√≥ng k·∫øt n·ªëi MongoDB');
  }
}

// Ch·∫°y script
updateCourseViews(); 